
Kevin Wolff Det Intelligente Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00000966  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002bc  008002bc  00000ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bc6  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001697  00000000  00000000  0000395e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015bc  00000000  00000000  00004ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000065b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098b  00000000  00000000  00006a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5d  00000000  00000000  0000740f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000836c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e6       	ldi	r30, 0x66	; 102
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3b       	cpi	r26, 0xBC	; 188
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac eb       	ldi	r26, 0xBC	; 188
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3c       	cpi	r26, 0xC2	; 194
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a1 d3       	rcall	.+1858   	; 0x862 <main>
 120:	20 c4       	rjmp	.+2112   	; 0x962 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PinCheck>:
		ResetInput();
}

int PinCheck(char input[], char hiddenPin[]){
	// ved strcmp returnere den 0 hvis begge strings er ens.
	int cmpvalue = strcmp(input, hiddenPin);
 124:	15 d4       	rcall	.+2090   	; 0x950 <strcmp>
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	89 2b       	or	r24, r25
 12c:	11 f0       	breq	.+4      	; 0x132 <PinCheck+0xe>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
 132:	c9 01       	movw	r24, r18
 134:	08 95       	ret

00000136 <AddCharacter>:

void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
	{
		if(input[i] == '*'){
 136:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13a:	9a 32       	cpi	r25, 0x2A	; 42
 13c:	a9 f0       	breq	.+42     	; 0x168 <AddCharacter+0x32>
 13e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 142:	9a 32       	cpi	r25, 0x2A	; 42
 144:	59 f0       	breq	.+22     	; 0x15c <AddCharacter+0x26>
 146:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 14a:	9a 32       	cpi	r25, 0x2A	; 42
 14c:	51 f0       	breq	.+20     	; 0x162 <AddCharacter+0x2c>
 14e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 152:	9a 32       	cpi	r25, 0x2A	; 42
 154:	71 f4       	brne	.+28     	; 0x172 <AddCharacter+0x3c>
	}
}

void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
 156:	e3 e0       	ldi	r30, 0x03	; 3
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	08 c0       	rjmp	.+16     	; 0x16c <AddCharacter+0x36>
 15c:	e1 e0       	ldi	r30, 0x01	; 1
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	05 c0       	rjmp	.+10     	; 0x16c <AddCharacter+0x36>
 162:	e2 e0       	ldi	r30, 0x02	; 2
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <AddCharacter+0x36>
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if(input[i] == '*'){
			input[i] = charakter;
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <TestInput>:
			break;
		}
	}
}

int TestInput(){
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 17c:	2a 32       	cpi	r18, 0x2A	; 42
 17e:	11 f4       	brne	.+4      	; 0x184 <TestInput+0x10>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	else{
		return 1;
	}
}
 184:	08 95       	ret

00000186 <ResetInput>:

void ResetInput(){
	for (int i = 0; i < PINLENGTH;i++)
	{
		input[i] = '*';
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	8a e2       	ldi	r24, 0x2A	; 42
 18c:	80 83       	st	Z, r24
 18e:	81 83       	std	Z+1, r24	; 0x01
 190:	82 83       	std	Z+2, r24	; 0x02
 192:	83 83       	std	Z+3, r24	; 0x03
 194:	08 95       	ret

00000196 <InputError>:
	//programmet kommer kun ud af while lykken hvis døren er låst op. (Lockcheck returnerer kun 0 eller 1)
}

void InputError(){
		//RGB LED lyser rød
		Toggle_Red();
 196:	c8 d3       	rcall	.+1936   	; 0x928 <Toggle_Red>
		wrongPinCount++;
 198:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <wrongPinCount>
 19c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <wrongPinCount+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <wrongPinCount+0x1>
 1a6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <wrongPinCount>
		DisplayError(wrongPinCount);
		ResetInput();
 1aa:	03 d3       	rcall	.+1542   	; 0x7b2 <DisplayError>
 1ac:	ec cf       	rjmp	.-40     	; 0x186 <ResetInput>
 1ae:	08 95       	ret

000001b0 <OpenLock>:
	else{
		LockOut();
	}
}

void OpenLock(){
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <OpenLock+0xa>
 1ba:	1f 92       	push	r1
 1bc:	1f 92       	push	r1
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	char hiddenPin[] = "1234";
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	e9 e0       	ldi	r30, 0x09	; 9
 1c6:	f2 e0       	ldi	r31, 0x02	; 2
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	8a 95       	dec	r24
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <OpenLock+0x1c>
	
	
	// display locked
	DisplayDoorLocked();
 1d4:	b5 d2       	rcall	.+1386   	; 0x740 <DisplayDoorLocked>
		// RGB LED Lyser blå
		Toggle_Blue();
		
		//if til hvis brugeren har indtastet den forkerte pin 3 gange
		if(wrongPinCount == 3){
			lock = -1;
 1d6:	0f ef       	ldi	r16, 0xFF	; 255
 1d8:	1f ef       	ldi	r17, 0xFF	; 255
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
	{
		// RGB LED Lyser blå
		Toggle_Blue();
 1da:	26 c0       	rjmp	.+76     	; 0x228 <OpenLock+0x78>
 1dc:	a8 d3       	rcall	.+1872   	; 0x92e <Toggle_Blue>
		
		//if til hvis brugeren har indtastet den forkerte pin 3 gange
		if(wrongPinCount == 3){
 1de:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <wrongPinCount>
 1e2:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <wrongPinCount+0x1>
 1e6:	03 97       	sbiw	r24, 0x03	; 3
 1e8:	99 f4       	brne	.+38     	; 0x210 <OpenLock+0x60>
			lock = -1;
 1ea:	10 93 bd 02 	sts	0x02BD, r17	; 0x8002bd <__data_end+0x1>
 1ee:	00 93 bc 02 	sts	0x02BC, r16	; 0x8002bc <__data_end>
 1f2:	1a c0       	rjmp	.+52     	; 0x228 <OpenLock+0x78>
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
			{
				DisplayInput(input);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
				char result = MatrixScanning();
 1f8:	40 d2       	rcall	.+1152   	; 0x67a <DisplayInput>
 1fa:	fd d0       	rcall	.+506    	; 0x3f6 <MatrixScanning>
				AddCharacter(result);
 1fc:	9c df       	rcall	.-200    	; 0x136 <AddCharacter>
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	83 ec       	ldi	r24, 0xC3	; 195
 202:	99 e0       	ldi	r25, 0x09	; 9
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <OpenLock+0x54>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <OpenLock+0x5e>
 20e:	00 00       	nop
		if(wrongPinCount == 3){
			lock = -1;
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
 210:	b1 df       	rcall	.-158    	; 0x174 <TestInput>
 212:	89 2b       	or	r24, r25
 214:	79 f3       	breq	.-34     	; 0x1f4 <OpenLock+0x44>
				char result = MatrixScanning();
				AddCharacter(result);
				_delay_ms(200);
			}
			//If til check om input er forkert
			if(PinCheck(input, hiddenPin) == 0){
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	81 df       	rcall	.-254    	; 0x124 <PinCheck>
 222:	89 2b       	or	r24, r25
 224:	09 f4       	brne	.+2      	; 0x228 <OpenLock+0x78>
				InputError();
 226:	b7 df       	rcall	.-146    	; 0x196 <InputError>
 228:	be 01       	movw	r22, r28
	
	// display locked
	DisplayDoorLocked();
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	78 df       	rcall	.-272    	; 0x124 <PinCheck>
 234:	89 2b       	or	r24, r25
 236:	91 f2       	breq	.-92     	; 0x1dc <OpenLock+0x2c>
 238:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <wrongPinCount+0x1>
			if(PinCheck(input, hiddenPin) == 0){
				InputError();
			}
		}
	}
	wrongPinCount = 0;
 23c:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <wrongPinCount>
	lock = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0x1>
 248:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
	DisplayLockOpen();
 24c:	96 d2       	rcall	.+1324   	; 0x77a <DisplayLockOpen>
 24e:	72 d3       	rcall	.+1764   	; 0x934 <Toggle_Green>
	Toggle_Green();
 250:	e2 d2       	rcall	.+1476   	; 0x816 <DisplayMyHomeGreeting>
 252:	0f 90       	pop	r0
	DisplayMyHomeGreeting();
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
	//programmet kommer kun ud af while lykken hvis døren er låst op. (Lockcheck returnerer kun 0 eller 1)
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <LockOpened>:
 266:	66 d3       	rcall	.+1740   	; 0x934 <Toggle_Green>
 268:	4e c3       	rjmp	.+1692   	; 0x906 <HouseMenu>
 26a:	08 95       	ret

0000026c <LockOut>:
	}
}

void LockOpened(){
	Toggle_Green();
	HouseMenu();
 26c:	c7 d2       	rcall	.+1422   	; 0x7fc <DisplayLockout>
}

void LockOut(){
	DisplayLockout();
	Toggle_Red();
 26e:	5c d3       	rcall	.+1720   	; 0x928 <Toggle_Red>
 270:	ff cf       	rjmp	.-2      	; 0x270 <LockOut+0x4>

00000272 <Doorlock>:
 272:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
static char input[6] = "****";
static int wrongPinCount = 0;
static int lock = 0;

void Doorlock(){
	if(lock == 0){
 276:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	11 f4       	brne	.+4      	; 0x282 <Doorlock+0x10>
		OpenLock();
 27e:	98 cf       	rjmp	.-208    	; 0x1b0 <OpenLock>
 280:	08 95       	ret
	}
	else if(lock == 1){
 282:	01 97       	sbiw	r24, 0x01	; 1
		LockOpened();
 284:	11 f4       	brne	.+4      	; 0x28a <Doorlock+0x18>
 286:	ef cf       	rjmp	.-34     	; 0x266 <LockOpened>
	}
	else{
		LockOut();
 288:	08 95       	ret
 28a:	f0 df       	rcall	.-32     	; 0x26c <LockOut>

0000028c <LockDoor>:
		//Det er ikke meningen at brugeren kan komme ud af denne while lykke
	}
}

void LockDoor(){
	lock = 0;
 28c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <__data_end+0x1>
 290:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__data_end>
	ResetInput();
 294:	78 cf       	rjmp	.-272    	; 0x186 <ResetInput>
 296:	08 95       	ret

00000298 <CheckLock>:
}

int CheckLock(){
	if(lock == 0){
 298:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
 29c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	29 f0       	breq	.+10     	; 0x2ae <CheckLock+0x16>
		return 0;
	}
	else if(lock == 1){
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	11 f0       	breq	.+4      	; 0x2ae <CheckLock+0x16>
		return 1;
	}
	else{
		return -1;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
	}
 2ae:	08 95       	ret

000002b0 <Init_Keypad>:
	Init_LIGTH();
}

void Init_Keypad(){
		//sætter input port (Pull up) på matrix keypad
		MATRIX_DDR &= ~MATRIX_DDR_INPUTPORT;
 2b0:	e7 e0       	ldi	r30, 0x07	; 7
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	80 81       	ld	r24, Z
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	80 83       	st	Z, r24
		
		// PK0-3 er High, PK4-7 er Low
		MATRIX_DDR |= MATRIX_DDR_OUTPUTPORT;
 2ba:	80 81       	ld	r24, Z
 2bc:	80 6f       	ori	r24, 0xF0	; 240
 2be:	80 83       	st	Z, r24
		MATRIX_PORT |= 0xFF;
 2c0:	e8 e0       	ldi	r30, 0x08	; 8
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	80 81       	ld	r24, Z
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret

000002cc <Init_RGBLED>:
		////	PK3	 0	 0	 0	 0
}

void Init_RGBLED(){
	//sætter input port (pull up) på RGB LED
	RGB_DDR &= ~RGB_DDR_INPUTPORT;
 2cc:	80 98       	cbi	0x10, 0	; 16
 2ce:	08 95       	ret

000002d0 <Init_LIGTH>:
}

void Init_LIGTH(){
	LIGHT_DDR |= LIGHT_PORT_OUTPUT;
 2d0:	09 9a       	sbi	0x01, 1	; 1
 2d2:	08 95       	ret

000002d4 <Init_Servo>:
}

void Init_Servo(){
	SERVO_DDR |= SERVO_PORT;
 2d4:	6b 9a       	sbi	0x0d, 3	; 13
 2d6:	08 95       	ret

000002d8 <Init_Timer3Servo>:
}

void Init_Timer3Servo(){
		// Compare Output Mode: Fast PWM Mode: Clear OC0A on Compare Match, set OC0A at BOTTOM, non-inverting mode (Table 16-3)
		SERVO_TIMER3A |= SERVO_TIMER3_COM;					// datasheet 16.9.1
 2d8:	e0 e9       	ldi	r30, 0x90	; 144
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 6a       	ori	r24, 0xA8	; 168
 2e0:	80 83       	st	Z, r24
		
		//Waveform Generation Mode: Mode 5 Phase Correct PWM: WGM0 = 1, WGM2 = 1 (Table 16-8)
		SERVO_TIMER3A |= SERVO_TIMER3A_WGM;
 2e2:	80 81       	ld	r24, Z
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 83       	st	Z, r24
		SERVO_TIMER3B |= SERVO_TIMER3B_WGM;
 2e8:	e1 e9       	ldi	r30, 0x91	; 145
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 61       	ori	r24, 0x10	; 16
 2f0:	80 83       	st	Z, r24
		
		// Clock Select Bit: clk/64 prescaling: CS = 011 : CS01 = 1, CS00 = 1 (Table 16-9), frekv. = 980Hz
		SERVO_TIMER3B |= SERVO_TIMER3_PRESCALER;		// datasheet 16.9.2
 2f2:	80 81       	ld	r24, Z
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 83       	st	Z, r24
		ICR3 = 20000;
 2f8:	80 e2       	ldi	r24, 0x20	; 32
 2fa:	9e e4       	ldi	r25, 0x4E	; 78
 2fc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 300:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 304:	08 95       	ret

00000306 <Display_Init>:
}

//initialiserer display
void Display_Init(){
	/* initialize display, cursor on */
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 306:	8f e0       	ldi	r24, 0x0F	; 15
 308:	71 d1       	rcall	.+738    	; 0x5ec <lcd_init>

	/* clear display and home cursor */
	lcd_clrscr();
 30a:	4c c1       	rjmp	.+664    	; 0x5a4 <lcd_clrscr>
 30c:	08 95       	ret

0000030e <Port_Init>:
 30e:	d0 df       	rcall	.-96     	; 0x2b0 <Init_Keypad>


//initialiser portne
void Port_Init(){
	Init_Keypad();
	Display_Init();
 310:	fa df       	rcall	.-12     	; 0x306 <Display_Init>
	Init_RGBLED();
 312:	dc df       	rcall	.-72     	; 0x2cc <Init_RGBLED>
	Init_Timer3Servo();
 314:	e1 df       	rcall	.-62     	; 0x2d8 <Init_Timer3Servo>
 316:	de df       	rcall	.-68     	; 0x2d4 <Init_Servo>
	Init_Servo();
 318:	db cf       	rjmp	.-74     	; 0x2d0 <Init_LIGTH>
 31a:	08 95       	ret

0000031c <ColumnScan>:
	Init_LIGTH();
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	21 f4       	brne	.+8      	; 0x328 <ColumnScan+0xc>
 320:	2f ee       	ldi	r18, 0xEF	; 239
}

//scanner columns efter hvilken der er blevet klikket på
int ColumnScan(int column){
	if(column == 0){
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT0;
 322:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 326:	08 95       	ret
	}
	else if(column == 1){
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	21 f4       	brne	.+8      	; 0x336 <ColumnScan+0x1a>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT1;
 32e:	2f ed       	ldi	r18, 0xDF	; 223
 330:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 334:	08 95       	ret
	}
	else if(column == 2){
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	91 05       	cpc	r25, r1
 33a:	21 f4       	brne	.+8      	; 0x344 <ColumnScan+0x28>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT2;
 33c:	2f eb       	ldi	r18, 0xBF	; 191
 33e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 342:	08 95       	ret
	}
	else if(column == 3){
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	91 05       	cpc	r25, r1
 348:	19 f4       	brne	.+6      	; 0x350 <ColumnScan+0x34>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT3;
 34a:	2f e7       	ldi	r18, 0x7F	; 127
 34c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	}
	
	return column;
}
 350:	08 95       	ret

00000352 <ReadRows>:

// læser hvilken row der er klikket på
int ReadRows(){
 	if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 352:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 356:	20 fd       	sbrc	r18, 0
 358:	0f c0       	rjmp	.+30     	; 0x378 <ReadRows+0x26>
 35a:	83 ec       	ldi	r24, 0xC3	; 195
 35c:	99 e0       	ldi	r25, 0x09	; 9
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <ReadRows+0xc>
 362:	00 c0       	rjmp	.+0      	; 0x364 <ReadRows+0x12>
 364:	00 00       	nop
		 _delay_ms(10);
		 if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 366:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 36a:	82 2f       	mov	r24, r18
 36c:	81 70       	andi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	91 95       	neg	r25
 372:	81 95       	neg	r24
 374:	91 09       	sbc	r25, r1
 376:	08 95       	ret
		 }
		 else{
			 return -1;
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
 378:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 37c:	81 fd       	sbrc	r24, 1
 37e:	0d c0       	rjmp	.+26     	; 0x39a <ReadRows+0x48>
 380:	83 ec       	ldi	r24, 0xC3	; 195
 382:	99 e0       	ldi	r25, 0x09	; 9
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <ReadRows+0x32>
 388:	00 c0       	rjmp	.+0      	; 0x38a <ReadRows+0x38>
 38a:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
 38c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 390:	81 ff       	sbrs	r24, 1
 392:	25 c0       	rjmp	.+74     	; 0x3de <ReadRows+0x8c>
			return 1;
		}
		else{
			return -1;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	9f ef       	ldi	r25, 0xFF	; 255
 398:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
 39a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 39e:	82 fd       	sbrc	r24, 2
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <ReadRows+0x6a>
 3a2:	83 ec       	ldi	r24, 0xC3	; 195
 3a4:	99 e0       	ldi	r25, 0x09	; 9
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <ReadRows+0x54>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <ReadRows+0x5a>
 3ac:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
 3ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3b2:	82 ff       	sbrs	r24, 2
 3b4:	17 c0       	rjmp	.+46     	; 0x3e4 <ReadRows+0x92>
			return 2;
		}
		else{
			return -1;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9f ef       	ldi	r25, 0xFF	; 255
 3ba:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
 3bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3c0:	83 fd       	sbrc	r24, 3
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <ReadRows+0x98>
 3c4:	83 ec       	ldi	r24, 0xC3	; 195
 3c6:	99 e0       	ldi	r25, 0x09	; 9
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <ReadRows+0x76>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <ReadRows+0x7c>
 3ce:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
 3d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3d4:	83 ff       	sbrs	r24, 3
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <ReadRows+0x9e>
			return 3;
		}
		else
		{
			return -1;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f ef       	ldi	r25, 0xFF	; 255
 3dc:	08 95       	ret
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
			return 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
			return 2;
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	08 95       	ret
		{
			return -1;
		}
	}
	else{
		return -1;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	9f ef       	ldi	r25, 0xFF	; 255
 3ee:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
			return 3;
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	else{
		return -1;
	}
}
 3f4:	08 95       	ret

000003f6 <MatrixScanning>:

#include <util/delay.h>



char MatrixScanning(){
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
	int column = 0;
 3fa:	c0 e0       	ldi	r28, 0x00	; 0
 3fc:	d0 e0       	ldi	r29, 0x00	; 0
	int row = -1;
	
	while(row == -1){
		ColumnScan(column);
 3fe:	ce 01       	movw	r24, r28
 400:	8d df       	rcall	.-230    	; 0x31c <ColumnScan>
		row = ReadRows();
 402:	a7 df       	rcall	.-178    	; 0x352 <ReadRows>
 404:	8f 3f       	cpi	r24, 0xFF	; 255
		
		if(row == -1){
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	92 07       	cpc	r25, r18
 40a:	39 f4       	brne	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	21 96       	adiw	r28, 0x01	; 1
			column++;
 40e:	c4 30       	cpi	r28, 0x04	; 4
			if(column > 3){
 410:	d1 05       	cpc	r29, r1
 412:	ac f3       	brlt	.-22     	; 0x3fe <MatrixScanning+0x8>
 414:	c0 e0       	ldi	r28, 0x00	; 0
				column = 0;
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	f2 cf       	rjmp	.-28     	; 0x3fe <MatrixScanning+0x8>
 41a:	cc 0f       	add	r28, r28
	}
}

// finder den character som passer til row og column der er klikket på
char DecodeKeyboard(int column, int row){
	return matrix[column][row];
 41c:	dd 1f       	adc	r29, r29
 41e:	cc 0f       	add	r28, r28
 420:	dd 1f       	adc	r29, r29
 422:	c2 5f       	subi	r28, 0xF2	; 242
 424:	dd 4f       	sbci	r29, 0xFD	; 253
 426:	c8 0f       	add	r28, r24
 428:	d9 1f       	adc	r29, r25
 42a:	88 81       	ld	r24, Y
				column = 0;
			}
		}
	}
	return DecodeKeyboard(column, row);
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <toggle_e>:
 432:	e2 e0       	ldi	r30, 0x02	; 2

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	80 81       	ld	r24, Z
 438:	80 62       	ori	r24, 0x20	; 32
 43a:	80 83       	st	Z, r24
 43c:	00 00       	nop
 43e:	80 81       	ld	r24, Z
 440:	8f 7d       	andi	r24, 0xDF	; 223
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <lcd_write>:
 446:	cf 93       	push	r28
 448:	c8 2f       	mov	r28, r24
 44a:	66 23       	and	r22, r22
 44c:	31 f0       	breq	.+12     	; 0x45a <lcd_write+0x14>
 44e:	e2 e0       	ldi	r30, 0x02	; 2
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	80 81       	ld	r24, Z
 454:	80 61       	ori	r24, 0x10	; 16
 456:	80 83       	st	Z, r24
 458:	05 c0       	rjmp	.+10     	; 0x464 <lcd_write+0x1e>
 45a:	e2 e0       	ldi	r30, 0x02	; 2
 45c:	f1 e0       	ldi	r31, 0x01	; 1
 45e:	80 81       	ld	r24, Z
 460:	8f 7e       	andi	r24, 0xEF	; 239
 462:	80 83       	st	Z, r24
 464:	e2 e0       	ldi	r30, 0x02	; 2
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	80 81       	ld	r24, Z
 46a:	87 7f       	andi	r24, 0xF7	; 247
 46c:	80 83       	st	Z, r24
 46e:	a1 e0       	ldi	r26, 0x01	; 1
 470:	b1 e0       	ldi	r27, 0x01	; 1
 472:	8c 91       	ld	r24, X
 474:	80 64       	ori	r24, 0x40	; 64
 476:	8c 93       	st	X, r24
 478:	24 9a       	sbi	0x04, 4	; 4
 47a:	25 9a       	sbi	0x04, 5	; 4
 47c:	26 9a       	sbi	0x04, 6	; 4
 47e:	2e 98       	cbi	0x05, 6	; 5
 480:	2d 98       	cbi	0x05, 5	; 5
 482:	2c 98       	cbi	0x05, 4	; 5
 484:	80 81       	ld	r24, Z
 486:	8f 7b       	andi	r24, 0xBF	; 191
 488:	80 83       	st	Z, r24
 48a:	cc 23       	and	r28, r28
 48c:	0c f4       	brge	.+2      	; 0x490 <lcd_write+0x4a>
 48e:	2e 9a       	sbi	0x05, 6	; 5
 490:	c6 fd       	sbrc	r28, 6
 492:	2d 9a       	sbi	0x05, 5	; 5
 494:	c5 fd       	sbrc	r28, 5
 496:	2c 9a       	sbi	0x05, 4	; 5
 498:	c4 ff       	sbrs	r28, 4
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <lcd_write+0x60>
 49c:	e2 e0       	ldi	r30, 0x02	; 2
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	80 81       	ld	r24, Z
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	80 83       	st	Z, r24
 4a6:	c5 df       	rcall	.-118    	; 0x432 <toggle_e>
 4a8:	2e 98       	cbi	0x05, 6	; 5
 4aa:	2d 98       	cbi	0x05, 5	; 5
 4ac:	2c 98       	cbi	0x05, 4	; 5
 4ae:	e2 e0       	ldi	r30, 0x02	; 2
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	80 81       	ld	r24, Z
 4b4:	8f 7b       	andi	r24, 0xBF	; 191
 4b6:	80 83       	st	Z, r24
 4b8:	c3 fd       	sbrc	r28, 3
 4ba:	2e 9a       	sbi	0x05, 6	; 5
 4bc:	c2 fd       	sbrc	r28, 2
 4be:	2d 9a       	sbi	0x05, 5	; 5
 4c0:	c1 fd       	sbrc	r28, 1
 4c2:	2c 9a       	sbi	0x05, 4	; 5
 4c4:	c0 ff       	sbrs	r28, 0
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <lcd_write+0x8c>
 4c8:	e2 e0       	ldi	r30, 0x02	; 2
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
 4cc:	80 81       	ld	r24, Z
 4ce:	80 64       	ori	r24, 0x40	; 64
 4d0:	80 83       	st	Z, r24
 4d2:	af df       	rcall	.-162    	; 0x432 <toggle_e>
 4d4:	e2 e0       	ldi	r30, 0x02	; 2
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	80 81       	ld	r24, Z
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	80 83       	st	Z, r24
 4de:	2c 9a       	sbi	0x05, 4	; 5
 4e0:	2d 9a       	sbi	0x05, 5	; 5
 4e2:	2e 9a       	sbi	0x05, 6	; 5
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <lcd_read>:
 4e8:	88 23       	and	r24, r24
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <lcd_read+0x10>
 4ec:	e2 e0       	ldi	r30, 0x02	; 2
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	80 81       	ld	r24, Z
 4f2:	80 61       	ori	r24, 0x10	; 16
 4f4:	80 83       	st	Z, r24
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <lcd_read+0x1a>
 4f8:	e2 e0       	ldi	r30, 0x02	; 2
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	80 81       	ld	r24, Z
 4fe:	8f 7e       	andi	r24, 0xEF	; 239
 500:	80 83       	st	Z, r24
 502:	e2 e0       	ldi	r30, 0x02	; 2
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	80 81       	ld	r24, Z
 508:	88 60       	ori	r24, 0x08	; 8
 50a:	80 83       	st	Z, r24
 50c:	a1 e0       	ldi	r26, 0x01	; 1
 50e:	b1 e0       	ldi	r27, 0x01	; 1
 510:	8c 91       	ld	r24, X
 512:	8f 7b       	andi	r24, 0xBF	; 191
 514:	8c 93       	st	X, r24
 516:	24 98       	cbi	0x04, 4	; 4
 518:	25 98       	cbi	0x04, 5	; 4
 51a:	26 98       	cbi	0x04, 6	; 4
 51c:	80 81       	ld	r24, Z
 51e:	80 62       	ori	r24, 0x20	; 32
 520:	80 83       	st	Z, r24
 522:	00 00       	nop
 524:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 528:	86 ff       	sbrs	r24, 6
 52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_read+0x48>
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	01 c0       	rjmp	.+2      	; 0x532 <lcd_read+0x4a>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	1c 99       	sbic	0x03, 4	; 3
 534:	80 62       	ori	r24, 0x20	; 32
 536:	1d 99       	sbic	0x03, 5	; 3
 538:	80 64       	ori	r24, 0x40	; 64
 53a:	1e 99       	sbic	0x03, 6	; 3
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	e2 e0       	ldi	r30, 0x02	; 2
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	90 81       	ld	r25, Z
 544:	9f 7d       	andi	r25, 0xDF	; 223
 546:	90 83       	st	Z, r25
 548:	00 00       	nop
 54a:	90 81       	ld	r25, Z
 54c:	90 62       	ori	r25, 0x20	; 32
 54e:	90 83       	st	Z, r25
 550:	00 00       	nop
 552:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 556:	96 fd       	sbrc	r25, 6
 558:	81 60       	ori	r24, 0x01	; 1
 55a:	1c 99       	sbic	0x03, 4	; 3
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	1d 99       	sbic	0x03, 5	; 3
 560:	84 60       	ori	r24, 0x04	; 4
 562:	1e 99       	sbic	0x03, 6	; 3
 564:	88 60       	ori	r24, 0x08	; 8
 566:	e2 e0       	ldi	r30, 0x02	; 2
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	90 81       	ld	r25, Z
 56c:	9f 7d       	andi	r25, 0xDF	; 223
 56e:	90 83       	st	Z, r25
 570:	08 95       	ret

00000572 <lcd_waitbusy>:
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	b9 df       	rcall	.-142    	; 0x4e8 <lcd_read>
 576:	88 23       	and	r24, r24
 578:	e4 f3       	brlt	.-8      	; 0x572 <lcd_waitbusy>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd_waitbusy+0xa>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <lcd_waitbusy+0xc>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	b3 cf       	rjmp	.-154    	; 0x4e8 <lcd_read>
 582:	08 95       	ret

00000584 <lcd_command>:
 584:	cf 93       	push	r28
 586:	c8 2f       	mov	r28, r24
 588:	f4 df       	rcall	.-24     	; 0x572 <lcd_waitbusy>
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8c 2f       	mov	r24, r28
 58e:	5b df       	rcall	.-330    	; 0x446 <lcd_write>
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <lcd_gotoxy>:
 594:	61 11       	cpse	r22, r1
 596:	03 c0       	rjmp	.+6      	; 0x59e <lcd_gotoxy+0xa>
 598:	80 58       	subi	r24, 0x80	; 128
 59a:	f4 cf       	rjmp	.-24     	; 0x584 <lcd_command>
 59c:	08 95       	ret
 59e:	80 54       	subi	r24, 0x40	; 64
 5a0:	f1 cf       	rjmp	.-30     	; 0x584 <lcd_command>
 5a2:	08 95       	ret

000005a4 <lcd_clrscr>:
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	ee cf       	rjmp	.-36     	; 0x584 <lcd_command>
 5a8:	08 95       	ret

000005aa <lcd_putc>:
 5aa:	cf 93       	push	r28
 5ac:	c8 2f       	mov	r28, r24
 5ae:	e1 df       	rcall	.-62     	; 0x572 <lcd_waitbusy>
 5b0:	ca 30       	cpi	r28, 0x0A	; 10
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <lcd_putc+0x1a>
 5b4:	80 34       	cpi	r24, 0x40	; 64
 5b6:	10 f0       	brcs	.+4      	; 0x5bc <lcd_putc+0x12>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <lcd_putc+0x14>
 5bc:	80 e4       	ldi	r24, 0x40	; 64
 5be:	80 58       	subi	r24, 0x80	; 128
 5c0:	e1 df       	rcall	.-62     	; 0x584 <lcd_command>
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <lcd_putc+0x20>
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	8c 2f       	mov	r24, r28
 5c8:	3e df       	rcall	.-388    	; 0x446 <lcd_write>
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <lcd_puts>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ec 01       	movw	r28, r24
 5d4:	21 96       	adiw	r28, 0x01	; 1
 5d6:	fc 01       	movw	r30, r24
 5d8:	80 81       	ld	r24, Z
 5da:	88 23       	and	r24, r24
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <lcd_puts+0x18>
 5de:	e5 df       	rcall	.-54     	; 0x5aa <lcd_putc>
 5e0:	89 91       	ld	r24, Y+
 5e2:	81 11       	cpse	r24, r1
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <lcd_puts+0x10>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 5f4:	e1 e0       	ldi	r30, 0x01	; 1
 5f6:	f1 e0       	ldi	r31, 0x01	; 1
 5f8:	80 81       	ld	r24, Z
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 5fe:	80 81       	ld	r24, Z
 600:	88 60       	ori	r24, 0x08	; 8
 602:	80 83       	st	Z, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 604:	80 81       	ld	r24, Z
 606:	80 62       	ori	r24, 0x20	; 32
 608:	80 83       	st	Z, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 60a:	80 81       	ld	r24, Z
 60c:	80 64       	ori	r24, 0x40	; 64
 60e:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 610:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 612:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 614:	26 9a       	sbi	0x04, 6	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <lcd_init+0x2e>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <lcd_init+0x34>
 620:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 622:	2c 9a       	sbi	0x05, 4	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 624:	c2 e0       	ldi	r28, 0x02	; 2
 626:	d1 e0       	ldi	r29, 0x01	; 1
 628:	88 81       	ld	r24, Y
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	88 83       	st	Y, r24
    lcd_e_toggle();
 62e:	01 df       	rcall	.-510    	; 0x432 <toggle_e>
 630:	81 ee       	ldi	r24, 0xE1	; 225
 632:	94 e0       	ldi	r25, 0x04	; 4
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <lcd_init+0x48>
 638:	00 c0       	rjmp	.+0      	; 0x63a <lcd_init+0x4e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 63a:	00 00       	nop
 63c:	fa de       	rcall	.-524    	; 0x432 <toggle_e>
 63e:	95 e1       	ldi	r25, 0x15	; 21
 640:	9a 95       	dec	r25
 642:	f1 f7       	brne	.-4      	; 0x640 <lcd_init+0x54>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 644:	00 00       	nop
 646:	f5 de       	rcall	.-534    	; 0x432 <toggle_e>
 648:	85 e1       	ldi	r24, 0x15	; 21
 64a:	8a 95       	dec	r24
 64c:	f1 f7       	brne	.-4      	; 0x64a <lcd_init+0x5e>
 64e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 650:	88 81       	ld	r24, Y
 652:	8f 7b       	andi	r24, 0xBF	; 191
    lcd_e_toggle();
 654:	88 83       	st	Y, r24
 656:	ed de       	rcall	.-550    	; 0x432 <toggle_e>
 658:	95 e1       	ldi	r25, 0x15	; 21
 65a:	9a 95       	dec	r25
 65c:	f1 f7       	brne	.-4      	; 0x65a <lcd_init+0x6e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 65e:	00 00       	nop
 660:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 662:	90 df       	rcall	.-224    	; 0x584 <lcd_command>
 664:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 666:	8e df       	rcall	.-228    	; 0x584 <lcd_command>
 668:	9d df       	rcall	.-198    	; 0x5a4 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 66a:	86 e0       	ldi	r24, 0x06	; 6
 66c:	8b df       	rcall	.-234    	; 0x584 <lcd_command>
 66e:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 670:	89 df       	rcall	.-238    	; 0x584 <lcd_command>
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28

}/* lcd_init */
 676:	1f 91       	pop	r17
 678:	08 95       	ret

0000067a <DisplayInput>:

#define F_CPU CPUFREQUENZ
#include <util/delay.h>

// viser input
void DisplayInput(char input[]){
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	29 97       	sbiw	r28, 0x09	; 9
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	7c 01       	movw	r14, r24
	lcd_clrscr();
 69c:	83 df       	rcall	.-250    	; 0x5a4 <lcd_clrscr>
	lcd_gotoxy(0,0);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	76 df       	rcall	.-276    	; 0x594 <lcd_gotoxy>
	lcd_puts("Input pin");
 6a8:	8e e1       	ldi	r24, 0x1E	; 30
 6aa:	92 e0       	ldi	r25, 0x02	; 2
 6ac:	90 df       	rcall	.-224    	; 0x5ce <lcd_puts>
	lcd_gotoxy(0,1);
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	6e df       	rcall	.-292    	; 0x594 <lcd_gotoxy>
	
	
	//for at udskrive en string skal der være \0 i slutningen
	char output[6] = "";
 6b8:	1a 82       	std	Y+2, r1	; 0x02
 6ba:	19 82       	std	Y+1, r1	; 0x01
 6bc:	fe 01       	movw	r30, r28
 6be:	33 96       	adiw	r30, 0x03	; 3
 6c0:	84 e0       	ldi	r24, 0x04	; 4
 6c2:	df 01       	movw	r26, r30
 6c4:	1d 92       	st	X+, r1
 6c6:	8a 95       	dec	r24
 6c8:	e9 f7       	brne	.-6      	; 0x6c4 <DisplayInput+0x4a>
	char krypt[] = "*\0";
 6ca:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
 6ce:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
 6d2:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
 6d6:	8f 83       	std	Y+7, r24	; 0x07
 6d8:	98 87       	std	Y+8, r25	; 0x08
 6da:	a9 87       	std	Y+9, r26	; 0x09
 6dc:	67 01       	movw	r12, r14
	for (int i = 0; i < strlen(input); i++)
 6de:	00 e0       	ldi	r16, 0x00	; 0
 6e0:	10 e0       	ldi	r17, 0x00	; 0
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <DisplayInput+0x84>
	{
		if(input[i] != '*'){
 6e4:	f6 01       	movw	r30, r12
 6e6:	81 91       	ld	r24, Z+
 6e8:	6f 01       	movw	r12, r30
 6ea:	8a 32       	cpi	r24, 0x2A	; 42
 6ec:	31 f0       	breq	.+12     	; 0x6fa <DisplayInput+0x80>
			strcat(output,krypt);
 6ee:	be 01       	movw	r22, r28
 6f0:	69 5f       	subi	r22, 0xF9	; 249
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	20 d1       	rcall	.+576    	; 0x93a <strcat>
	
	
	//for at udskrive en string skal der være \0 i slutningen
	char output[6] = "";
	char krypt[] = "*\0";
	for (int i = 0; i < strlen(input); i++)
 6fa:	0f 5f       	subi	r16, 0xFF	; 255
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	f7 01       	movw	r30, r14
 700:	01 90       	ld	r0, Z+
 702:	00 20       	and	r0, r0
 704:	e9 f7       	brne	.-6      	; 0x700 <DisplayInput+0x86>
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	ee 19       	sub	r30, r14
 70a:	ff 09       	sbc	r31, r15
 70c:	0e 17       	cp	r16, r30
 70e:	1f 07       	cpc	r17, r31
	{
		if(input[i] != '*'){
			strcat(output,krypt);
		}
	}
	lcd_puts(output);
 710:	48 f3       	brcs	.-46     	; 0x6e4 <DisplayInput+0x6a>
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	5b df       	rcall	.-330    	; 0x5ce <lcd_puts>
}
 718:	29 96       	adiw	r28, 0x09	; 9
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	08 95       	ret

00000736 <DisplayPinCheck>:

void DisplayPinCheck(){
	lcd_clrscr();
 736:	36 df       	rcall	.-404    	; 0x5a4 <lcd_clrscr>
	lcd_puts("Checking Lock");
 738:	88 e2       	ldi	r24, 0x28	; 40
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	48 cf       	rjmp	.-368    	; 0x5ce <lcd_puts>
 73e:	08 95       	ret

00000740 <DisplayDoorLocked>:
}

void DisplayDoorLocked(){
	lcd_clrscr();
 740:	31 df       	rcall	.-414    	; 0x5a4 <lcd_clrscr>
	DisplayPinCheck();
 742:	f9 df       	rcall	.-14     	; 0x736 <DisplayPinCheck>
 744:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 746:	8d e3       	ldi	r24, 0x3D	; 61
 748:	99 e4       	ldi	r25, 0x49	; 73
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	90 40       	sbci	r25, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <DisplayDoorLocked+0xa>
 752:	00 c0       	rjmp	.+0      	; 0x754 <DisplayDoorLocked+0x14>
 754:	00 00       	nop
 756:	61 e0       	ldi	r22, 0x01	; 1
	_delay_ms(DISPLAYDELAY);
	lcd_gotoxy(0,1);
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	1a df       	rcall	.-460    	; 0x594 <lcd_gotoxy>
 760:	86 e3       	ldi	r24, 0x36	; 54
	lcd_puts("Locked");
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	34 df       	rcall	.-408    	; 0x5ce <lcd_puts>
 766:	2f ef       	ldi	r18, 0xFF	; 255
 768:	8d e3       	ldi	r24, 0x3D	; 61
 76a:	99 e4       	ldi	r25, 0x49	; 73
 76c:	21 50       	subi	r18, 0x01	; 1
 76e:	80 40       	sbci	r24, 0x00	; 0
 770:	90 40       	sbci	r25, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <DisplayDoorLocked+0x2c>
 774:	00 c0       	rjmp	.+0      	; 0x776 <DisplayDoorLocked+0x36>
 776:	00 00       	nop
 778:	08 95       	ret

0000077a <DisplayLockOpen>:
 77a:	dd df       	rcall	.-70     	; 0x736 <DisplayPinCheck>
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	8d e3       	ldi	r24, 0x3D	; 61
 780:	99 e4       	ldi	r25, 0x49	; 73
 782:	21 50       	subi	r18, 0x01	; 1
 784:	80 40       	sbci	r24, 0x00	; 0
 786:	90 40       	sbci	r25, 0x00	; 0
 788:	e1 f7       	brne	.-8      	; 0x782 <DisplayLockOpen+0x8>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <DisplayLockOpen+0x12>
 78c:	00 00       	nop
}

void DisplayLockOpen(){
	DisplayPinCheck();
	_delay_ms(DISPLAYDELAY);
	lcd_gotoxy(0,1);
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	fe de       	rcall	.-516    	; 0x594 <lcd_gotoxy>
	lcd_puts("Unlocked");
 798:	8d e3       	ldi	r24, 0x3D	; 61
 79a:	92 e0       	ldi	r25, 0x02	; 2
 79c:	18 df       	rcall	.-464    	; 0x5ce <lcd_puts>
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	8d e3       	ldi	r24, 0x3D	; 61
 7a2:	99 e4       	ldi	r25, 0x49	; 73
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	80 40       	sbci	r24, 0x00	; 0
 7a8:	90 40       	sbci	r25, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <DisplayLockOpen+0x2a>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <DisplayLockOpen+0x34>
 7ae:	00 00       	nop
 7b0:	08 95       	ret

000007b2 <DisplayError>:
	_delay_ms(DISPLAYDELAY);
}

void DisplayError(int pincount){
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	ec 01       	movw	r28, r24
	lcd_clrscr();
 7b8:	f5 de       	rcall	.-534    	; 0x5a4 <lcd_clrscr>
	lcd_puts("Error: Wrong Pin");
 7ba:	86 e4       	ldi	r24, 0x46	; 70
 7bc:	92 e0       	ldi	r25, 0x02	; 2
 7be:	07 df       	rcall	.-498    	; 0x5ce <lcd_puts>
	lcd_gotoxy(0,1);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	e5 de       	rcall	.-566    	; 0x594 <lcd_gotoxy>
	switch (pincount)
 7ca:	c1 30       	cpi	r28, 0x01	; 1
 7cc:	d1 05       	cpc	r29, r1
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <DisplayError+0x24>
 7d0:	22 97       	sbiw	r28, 0x02	; 2
 7d2:	29 f0       	breq	.+10     	; 0x7de <DisplayError+0x2c>
	{
		case 1:
			lcd_puts("Try again");
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <DisplayError+0x32>
 7d6:	87 e5       	ldi	r24, 0x57	; 87
 7d8:	92 e0       	ldi	r25, 0x02	; 2
			break;
 7da:	f9 de       	rcall	.-526    	; 0x5ce <lcd_puts>
		case 2:
			lcd_puts("Last chance");
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <DisplayError+0x32>
 7de:	81 e6       	ldi	r24, 0x61	; 97
 7e0:	92 e0       	ldi	r25, 0x02	; 2
 7e2:	f5 de       	rcall	.-534    	; 0x5ce <lcd_puts>
 7e4:	2f ef       	ldi	r18, 0xFF	; 255
 7e6:	8d e3       	ldi	r24, 0x3D	; 61
 7e8:	99 e4       	ldi	r25, 0x49	; 73
 7ea:	21 50       	subi	r18, 0x01	; 1
 7ec:	80 40       	sbci	r24, 0x00	; 0
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <DisplayError+0x38>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <DisplayError+0x42>
 7f4:	00 00       	nop
			break;
		default:
		break;
	}
	_delay_ms(DISPLAYDELAY);
}
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <DisplayLockout>:

void DisplayLockout(){
	lcd_clrscr();
 7fc:	d3 de       	rcall	.-602    	; 0x5a4 <lcd_clrscr>
	lcd_puts("Too Many Errors");
 7fe:	8d e6       	ldi	r24, 0x6D	; 109
 800:	92 e0       	ldi	r25, 0x02	; 2
 802:	e5 de       	rcall	.-566    	; 0x5ce <lcd_puts>
	lcd_gotoxy(0,1);
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	c3 de       	rcall	.-634    	; 0x594 <lcd_gotoxy>
	lcd_puts("Locked out :D");
 80e:	8d e7       	ldi	r24, 0x7D	; 125
 810:	92 e0       	ldi	r25, 0x02	; 2
 812:	dd ce       	rjmp	.-582    	; 0x5ce <lcd_puts>
 814:	08 95       	ret

00000816 <DisplayMyHomeGreeting>:
 816:	c6 de       	rcall	.-628    	; 0x5a4 <lcd_clrscr>
}

void DisplayMyHomeGreeting(){
	lcd_clrscr();
	lcd_puts("Welcome to");
 818:	8b e8       	ldi	r24, 0x8B	; 139
 81a:	92 e0       	ldi	r25, 0x02	; 2
 81c:	d8 de       	rcall	.-592    	; 0x5ce <lcd_puts>
	lcd_gotoxy(0,1);
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	b6 de       	rcall	.-660    	; 0x594 <lcd_gotoxy>
	lcd_puts("My Home");
 828:	86 e9       	ldi	r24, 0x96	; 150
 82a:	92 e0       	ldi	r25, 0x02	; 2
 82c:	d0 de       	rcall	.-608    	; 0x5ce <lcd_puts>
 82e:	2f ef       	ldi	r18, 0xFF	; 255
 830:	8d e3       	ldi	r24, 0x3D	; 61
 832:	99 e4       	ldi	r25, 0x49	; 73
 834:	21 50       	subi	r18, 0x01	; 1
 836:	80 40       	sbci	r24, 0x00	; 0
 838:	90 40       	sbci	r25, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <DisplayMyHomeGreeting+0x1e>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <DisplayMyHomeGreeting+0x28>
 83e:	00 00       	nop
 840:	08 95       	ret

00000842 <DisplayChoices>:
 842:	b0 de       	rcall	.-672    	; 0x5a4 <lcd_clrscr>
	_delay_ms(DISPLAYDELAY);	
}

void DisplayChoices(){
		lcd_clrscr();
		lcd_puts("A:Light ");
 844:	8e e9       	ldi	r24, 0x9E	; 158
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	c2 de       	rcall	.-636    	; 0x5ce <lcd_puts>
		lcd_puts("B:Garage");
 84a:	87 ea       	ldi	r24, 0xA7	; 167
 84c:	92 e0       	ldi	r25, 0x02	; 2
 84e:	bf de       	rcall	.-642    	; 0x5ce <lcd_puts>
		lcd_gotoxy(0,1);
 850:	61 e0       	ldi	r22, 0x01	; 1
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
		lcd_puts("C:Lock Door");
 858:	9d de       	rcall	.-710    	; 0x594 <lcd_gotoxy>
 85a:	80 eb       	ldi	r24, 0xB0	; 176
 85c:	92 e0       	ldi	r25, 0x02	; 2
 85e:	b7 ce       	rjmp	.-658    	; 0x5ce <lcd_puts>
 860:	08 95       	ret

00000862 <main>:
int main(void)
{
	char buffer[7];


	Port_Init();
 862:	55 dd       	rcall	.-1366   	; 0x30e <Port_Init>
    /* Replace with your application code */
    while (1) 
    {
		Display_Init();
 864:	50 dd       	rcall	.-1376   	; 0x306 <Display_Init>
		
		Doorlock();
 866:	05 dd       	rcall	.-1526   	; 0x272 <Doorlock>
 868:	fd cf       	rjmp	.-6      	; 0x864 <main+0x2>

0000086a <ToggleLight>:
 86a:	92 b1       	in	r25, 0x02	; 2
		break;
	}
}

void ToggleLight(){
	LIGHT_TOGGLE;
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	89 27       	eor	r24, r25
 870:	82 b9       	out	0x02, r24	; 2
 872:	08 95       	ret

00000874 <ToggleGarage>:
}

void ToggleGarage(){
	static int switcher = 0;
	if(switcher == 0){
 874:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <switcher.1791>
 878:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <switcher.1791+0x1>
 87c:	00 97       	sbiw	r24, 0x00	; 0
 87e:	91 f4       	brne	.+36     	; 0x8a4 <ToggleGarage+0x30>
 880:	84 ef       	ldi	r24, 0xF4	; 244
 882:	91 e0       	ldi	r25, 0x01	; 1
		for (int i = 500; i < 2600; i++)
		{
			SERVO_OC = i;
 884:	e8 e9       	ldi	r30, 0x98	; 152
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	91 83       	std	Z+1, r25	; 0x01
 88a:	80 83       	st	Z, r24
 88c:	af e9       	ldi	r26, 0x9F	; 159
 88e:	bf e0       	ldi	r27, 0x0F	; 15
 890:	11 97       	sbiw	r26, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <ToggleGarage+0x1c>
 894:	00 c0       	rjmp	.+0      	; 0x896 <ToggleGarage+0x22>
 896:	00 00       	nop
}

void ToggleGarage(){
	static int switcher = 0;
	if(switcher == 0){
		for (int i = 500; i < 2600; i++)
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	88 32       	cpi	r24, 0x28	; 40
 89c:	ba e0       	ldi	r27, 0x0A	; 10
 89e:	9b 07       	cpc	r25, r27
 8a0:	99 f7       	brne	.-26     	; 0x888 <ToggleGarage+0x14>
 8a2:	13 c0       	rjmp	.+38     	; 0x8ca <ToggleGarage+0x56>
		{
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	else if(switcher == 1){
 8a4:	01 97       	sbiw	r24, 0x01	; 1
 8a6:	89 f4       	brne	.+34     	; 0x8ca <ToggleGarage+0x56>
 8a8:	88 e2       	ldi	r24, 0x28	; 40
 8aa:	9a e0       	ldi	r25, 0x0A	; 10
		for (int i = 2600; i > 500; i--)
		{
			SERVO_OC = i;
 8ac:	e8 e9       	ldi	r30, 0x98	; 152
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	91 83       	std	Z+1, r25	; 0x01
 8b2:	80 83       	st	Z, r24
 8b4:	af e9       	ldi	r26, 0x9F	; 159
 8b6:	bf e0       	ldi	r27, 0x0F	; 15
 8b8:	11 97       	sbiw	r26, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <ToggleGarage+0x44>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <ToggleGarage+0x4a>
 8be:	00 00       	nop
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	else if(switcher == 1){
		for (int i = 2600; i > 500; i--)
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	84 3f       	cpi	r24, 0xF4	; 244
 8c4:	b1 e0       	ldi	r27, 0x01	; 1
 8c6:	9b 07       	cpc	r25, r27
 8c8:	99 f7       	brne	.-26     	; 0x8b0 <ToggleGarage+0x3c>
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	
	switcher++;
 8ca:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <switcher.1791>
 8ce:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <switcher.1791+0x1>
 8d2:	01 96       	adiw	r24, 0x01	; 1
	if(switcher > 1){
 8d4:	82 30       	cpi	r24, 0x02	; 2
 8d6:	91 05       	cpc	r25, r1
 8d8:	2c f4       	brge	.+10     	; 0x8e4 <ToggleGarage+0x70>
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	
	switcher++;
 8da:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <switcher.1791+0x1>
 8de:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <switcher.1791>
 8e2:	08 95       	ret
	if(switcher > 1){
		switcher = 0;
 8e4:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <switcher.1791+0x1>
 8e8:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <switcher.1791>
 8ec:	08 95       	ret

000008ee <HouseController>:
		_delay_ms(200);
	}
}

void HouseController(char choice){
	switch(choice){
 8ee:	82 34       	cpi	r24, 0x42	; 66
 8f0:	31 f0       	breq	.+12     	; 0x8fe <HouseController+0x10>
 8f2:	83 34       	cpi	r24, 0x43	; 67
 8f4:	31 f0       	breq	.+12     	; 0x902 <HouseController+0x14>
 8f6:	81 34       	cpi	r24, 0x41	; 65
 8f8:	29 f4       	brne	.+10     	; 0x904 <HouseController+0x16>
		case 'A':
		ToggleLight();
 8fa:	b7 cf       	rjmp	.-146    	; 0x86a <ToggleLight>
		break;
		case 'B':
		ToggleGarage();
 8fc:	08 95       	ret
		break;
 8fe:	ba cf       	rjmp	.-140    	; 0x874 <ToggleGarage>
		case 'C':
		LockDoor();
 900:	08 95       	ret
 902:	c4 cc       	rjmp	.-1656   	; 0x28c <LockDoor>
 904:	08 95       	ret

00000906 <HouseMenu>:

#define F_CPU CPUFREQUENZ
#include <util/delay.h>

void HouseMenu(){
	DisplayChoices();
 906:	9d df       	rcall	.-198    	; 0x842 <DisplayChoices>
	while(CheckLock() == 1){
		char choice = MatrixScanning();
 908:	0b c0       	rjmp	.+22     	; 0x920 <HouseMenu+0x1a>
		HouseController(choice);
 90a:	75 dd       	rcall	.-1302   	; 0x3f6 <MatrixScanning>
 90c:	f0 df       	rcall	.-32     	; 0x8ee <HouseController>
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	83 ec       	ldi	r24, 0xC3	; 195
 912:	99 e0       	ldi	r25, 0x09	; 9
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <HouseMenu+0xe>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <HouseMenu+0x18>
#define F_CPU CPUFREQUENZ
#include <util/delay.h>

void HouseMenu(){
	DisplayChoices();
	while(CheckLock() == 1){
 91e:	00 00       	nop
 920:	bb dc       	rcall	.-1674   	; 0x298 <CheckLock>
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	91 f3       	breq	.-28     	; 0x90a <HouseMenu+0x4>
		char choice = MatrixScanning();
		HouseController(choice);
		_delay_ms(200);
	}
}
 926:	08 95       	ret

00000928 <Toggle_Red>:
void Toggle_Blue(){
	RGB_TOGGLE_BLUE;
}

void Toggle_Yellow(){
	RGB_TOGGLE_YELLow;
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	81 bb       	out	0x11, r24	; 17
 92c:	08 95       	ret

0000092e <Toggle_Blue>:
 92e:	84 e0       	ldi	r24, 0x04	; 4
 930:	81 bb       	out	0x11, r24	; 17
 932:	08 95       	ret

00000934 <Toggle_Green>:
}

void Toggle_Green(){
	RGB_TOGGLE_GREEN;
 934:	82 e0       	ldi	r24, 0x02	; 2
 936:	81 bb       	out	0x11, r24	; 17
 938:	08 95       	ret

0000093a <strcat>:
 93a:	fb 01       	movw	r30, r22
 93c:	dc 01       	movw	r26, r24
 93e:	0d 90       	ld	r0, X+
 940:	00 20       	and	r0, r0
 942:	e9 f7       	brne	.-6      	; 0x93e <strcat+0x4>
 944:	11 97       	sbiw	r26, 0x01	; 1
 946:	01 90       	ld	r0, Z+
 948:	0d 92       	st	X+, r0
 94a:	00 20       	and	r0, r0
 94c:	e1 f7       	brne	.-8      	; 0x946 <strcat+0xc>
 94e:	08 95       	ret

00000950 <strcmp>:
 950:	fb 01       	movw	r30, r22
 952:	dc 01       	movw	r26, r24
 954:	8d 91       	ld	r24, X+
 956:	01 90       	ld	r0, Z+
 958:	80 19       	sub	r24, r0
 95a:	01 10       	cpse	r0, r1
 95c:	d9 f3       	breq	.-10     	; 0x954 <strcmp+0x4>
 95e:	99 0b       	sbc	r25, r25
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
