
Kevin Wolff Det Intelligente Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  0000096c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002bc  008002bc  00000abc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be8  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169f  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b8  00000000  00000000  00005023  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  000065dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2f  00000000  00000000  00006aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f43  00000000  00000000  000074cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00008412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3b       	cpi	r26, 0xBC	; 188
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac eb       	ldi	r26, 0xBC	; 188
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3c       	cpi	r26, 0xC2	; 194
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a5 d3       	rcall	.+1866   	; 0x86a <main>
 120:	23 c4       	rjmp	.+2118   	; 0x968 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PinCheck>:
}

// kigger om input og hiddenPin stemmer over ens
int PinCheck(char input[], char hiddenPin[]){
	// ved strcmp returnere den 0 hvis begge strings er ens.
	int cmpvalue = strcmp(input, hiddenPin);
 124:	18 d4       	rcall	.+2096   	; 0x956 <strcmp>
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	89 2b       	or	r24, r25
 12c:	11 f0       	breq	.+4      	; 0x132 <PinCheck+0xe>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
 132:	c9 01       	movw	r24, r18
 134:	08 95       	ret

00000136 <AddCharacter>:
// tilføjer charakter til global variablen: input
void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
	{
		if(input[i] == '*'){
 136:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13a:	9a 32       	cpi	r25, 0x2A	; 42
 13c:	a9 f0       	breq	.+42     	; 0x168 <AddCharacter+0x32>
 13e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 142:	9a 32       	cpi	r25, 0x2A	; 42
 144:	59 f0       	breq	.+22     	; 0x15c <AddCharacter+0x26>
 146:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 14a:	9a 32       	cpi	r25, 0x2A	; 42
 14c:	51 f0       	breq	.+20     	; 0x162 <AddCharacter+0x2c>
 14e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 152:	9a 32       	cpi	r25, 0x2A	; 42
 154:	71 f4       	brne	.+28     	; 0x172 <AddCharacter+0x3c>
}

// tilføjer charakter til global variablen: input
void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
 156:	e3 e0       	ldi	r30, 0x03	; 3
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	08 c0       	rjmp	.+16     	; 0x16c <AddCharacter+0x36>
 15c:	e1 e0       	ldi	r30, 0x01	; 1
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	05 c0       	rjmp	.+10     	; 0x16c <AddCharacter+0x36>
 162:	e2 e0       	ldi	r30, 0x02	; 2
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <AddCharacter+0x36>
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if(input[i] == '*'){
			input[i] = charakter;
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <TestInput>:
		}
	}
}

// tester input om alle karakterer er blevet ændret fra * til noget andet
int TestInput(){
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 17c:	2a 32       	cpi	r18, 0x2A	; 42
 17e:	11 f4       	brne	.+4      	; 0x184 <TestInput+0x10>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	else{
		return 1;
	}
}
 184:	08 95       	ret

00000186 <ResetInput>:

// sætter Global variabel input, til default: ****
void ResetInput(){
	for (int i = 0; i < PINLENGTH;i++)
	{
		input[i] = '*';
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	8a e2       	ldi	r24, 0x2A	; 42
 18c:	80 83       	st	Z, r24
 18e:	81 83       	std	Z+1, r24	; 0x01
 190:	82 83       	std	Z+2, r24	; 0x02
 192:	83 83       	std	Z+3, r24	; 0x03
 194:	08 95       	ret

00000196 <InputError>:
}

// Kører nødvendige funktioner til hvis brugeren indtaster forkert
void InputError(){
		//RGB LED lyser rød
		Toggle_Red();
 196:	cb d3       	rcall	.+1942   	; 0x92e <Toggle_Red>
		wrongPinCount++;
 198:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <wrongPinCount>
 19c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <wrongPinCount+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <wrongPinCount+0x1>
 1a6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <wrongPinCount>
		DisplayError(wrongPinCount);
		ResetInput();
 1aa:	07 d3       	rcall	.+1550   	; 0x7ba <DisplayError>
 1ac:	ec cf       	rjmp	.-40     	; 0x186 <ResetInput>
 1ae:	08 95       	ret

000001b0 <OpenLock>:
		LockOut();
	}
}

// Funktion der ber om pin og åbner låsen alt efter om pin er rigtig eller ej
void OpenLock(){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <OpenLock+0x6>
 1b6:	1f 92       	push	r1
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
	char hiddenPin[] = "1234";
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	e9 e0       	ldi	r30, 0x09	; 9
 1c2:	f2 e0       	ldi	r31, 0x02	; 2
 1c4:	de 01       	movw	r26, r28
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	01 90       	ld	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	8a 95       	dec	r24
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <OpenLock+0x18>
	
	
	// display locked
	DisplayDoorLocked();
 1d0:	bb d2       	rcall	.+1398   	; 0x748 <DisplayDoorLocked>
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
	{
		// RGB LED Lyser blå
		Toggle_Blue();
 1d2:	28 c0       	rjmp	.+80     	; 0x224 <OpenLock+0x74>
 1d4:	af d3       	rcall	.+1886   	; 0x934 <Toggle_Blue>
		
		//if til hvis brugeren har indtastet den forkerte pin 3 gange
		if(wrongPinCount == 3){
 1d6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <wrongPinCount>
 1da:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <wrongPinCount+0x1>
 1de:	03 97       	sbiw	r24, 0x03	; 3
 1e0:	a9 f4       	brne	.+42     	; 0x20c <OpenLock+0x5c>
			lock = -1;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0x1>
 1ea:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
			break;
 1ee:	22 c0       	rjmp	.+68     	; 0x234 <OpenLock+0x84>
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
			{
				DisplayInput(input);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	92 e0       	ldi	r25, 0x02	; 2
				char result = MatrixScanning();
 1f4:	46 d2       	rcall	.+1164   	; 0x682 <DisplayInput>
 1f6:	03 d1       	rcall	.+518    	; 0x3fe <MatrixScanning>
				AddCharacter(result);
 1f8:	9e df       	rcall	.-196    	; 0x136 <AddCharacter>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	83 ec       	ldi	r24, 0xC3	; 195
 1fe:	99 e0       	ldi	r25, 0x09	; 9
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <OpenLock+0x50>
 208:	00 c0       	rjmp	.+0      	; 0x20a <OpenLock+0x5a>
 20a:	00 00       	nop
			lock = -1;
			break;
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
 20c:	b3 df       	rcall	.-154    	; 0x174 <TestInput>
 20e:	89 2b       	or	r24, r25
 210:	79 f3       	breq	.-34     	; 0x1f0 <OpenLock+0x40>
				char result = MatrixScanning();
				AddCharacter(result);
				_delay_ms(200);
			}
			//If til check om input er forkert
			if(PinCheck(input, hiddenPin) == 0){
 212:	be 01       	movw	r22, r28
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	83 df       	rcall	.-250    	; 0x124 <PinCheck>
 21e:	89 2b       	or	r24, r25
 220:	09 f4       	brne	.+2      	; 0x224 <OpenLock+0x74>
				InputError();
 222:	b9 df       	rcall	.-142    	; 0x196 <InputError>
 224:	be 01       	movw	r22, r28
	
	// display locked
	DisplayDoorLocked();
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
 226:	6f 5f       	subi	r22, 0xFF	; 255
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	7a df       	rcall	.-268    	; 0x124 <PinCheck>
 230:	89 2b       	or	r24, r25
 232:	81 f2       	breq	.-96     	; 0x1d4 <OpenLock+0x24>
 234:	be 01       	movw	r22, r28
				InputError();
			}
		}
	}
	//Hvis pin stemmer over ens
	if(PinCheck(input, hiddenPin) == 1){
 236:	6f 5f       	subi	r22, 0xFF	; 255
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	72 df       	rcall	.-284    	; 0x124 <PinCheck>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	69 f4       	brne	.+26     	; 0x25e <OpenLock+0xae>
 244:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <wrongPinCount+0x1>
		wrongPinCount = 0;
 248:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <wrongPinCount>
		lock = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0x1>
 254:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
		DisplayLockOpen();
 258:	94 d2       	rcall	.+1320   	; 0x782 <DisplayLockOpen>
 25a:	6f d3       	rcall	.+1758   	; 0x93a <Toggle_Green>
		Toggle_Green();
 25c:	e0 d2       	rcall	.+1472   	; 0x81e <DisplayMyHomeGreeting>
 25e:	0f 90       	pop	r0
		DisplayMyHomeGreeting();
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
	}
	//programmet kommer kun ud af while lykken hvis døren er låst op. (Lockcheck returnerer kun 0 eller 1)
}
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <LockOpened>:
 26e:	65 d3       	rcall	.+1738   	; 0x93a <Toggle_Green>
 270:	4d c3       	rjmp	.+1690   	; 0x90c <HouseMenu>
 272:	08 95       	ret

00000274 <LockOut>:
}

// Kører funktioner hvis låsen er låst op
void LockOpened(){
	Toggle_Green();
	HouseMenu();
 274:	c7 d2       	rcall	.+1422   	; 0x804 <DisplayLockout>
}

// lukker brugeren ude hvis pin er inputtet 3 gange forkert
void LockOut(){
	DisplayLockout();
	Toggle_Red();
 276:	5b d3       	rcall	.+1718   	; 0x92e <Toggle_Red>
 278:	ff cf       	rjmp	.-2      	; 0x278 <LockOut+0x4>

0000027a <Doorlock>:
 27a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
int wrongPinCount = 0;
int lock = 0;

// Kigger om døre er låst eller ej, og vælger hvilken menu programmet skal køre
void Doorlock(){
	if(lock == 0){
 27e:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	11 f4       	brne	.+4      	; 0x28a <Doorlock+0x10>
		OpenLock();
 286:	94 cf       	rjmp	.-216    	; 0x1b0 <OpenLock>
 288:	08 95       	ret
	}
	else if(lock == 1){
 28a:	01 97       	sbiw	r24, 0x01	; 1
		LockOpened();
 28c:	11 f4       	brne	.+4      	; 0x292 <Doorlock+0x18>
 28e:	ef cf       	rjmp	.-34     	; 0x26e <LockOpened>
	}
	else{
		LockOut();
 290:	08 95       	ret
 292:	f0 df       	rcall	.-32     	; 0x274 <LockOut>

00000294 <LockDoor>:
	}
}

// låser døren og nulstiller input
void LockDoor(){
	lock = 0;
 294:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <__data_end+0x1>
 298:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__data_end>
	ResetInput();
 29c:	74 cf       	rjmp	.-280    	; 0x186 <ResetInput>
 29e:	08 95       	ret

000002a0 <CheckLock>:
}

// kigger om døren er låst
int CheckLock(){
	if(lock == 0){
 2a0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
 2a4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <CheckLock+0x16>
		return 0;
	}
	else if(lock == 1){
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	91 05       	cpc	r25, r1
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <CheckLock+0x16>
		return 1;
	}
	else{
		return -1;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	9f ef       	ldi	r25, 0xFF	; 255
	}
 2b6:	08 95       	ret

000002b8 <Init_Keypad>:
 2b8:	e7 e0       	ldi	r30, 0x07	; 7
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
 2c2:	80 81       	ld	r24, Z
 2c4:	80 6f       	ori	r24, 0xF0	; 240
 2c6:	80 83       	st	Z, r24
 2c8:	e8 e0       	ldi	r30, 0x08	; 8
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	80 81       	ld	r24, Z
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 83       	st	Z, r24
 2d2:	08 95       	ret

000002d4 <Init_RGBLED>:
 2d4:	80 98       	cbi	0x10, 0	; 16
 2d6:	08 95       	ret

000002d8 <Init_LIGTH>:
 2d8:	09 9a       	sbi	0x01, 1	; 1
 2da:	08 95       	ret

000002dc <Init_Servo>:
 2dc:	6b 9a       	sbi	0x0d, 3	; 13
 2de:	08 95       	ret

000002e0 <Init_Timer3Servo>:
 2e0:	e0 e9       	ldi	r30, 0x90	; 144
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	88 6a       	ori	r24, 0xA8	; 168
 2e8:	80 83       	st	Z, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
 2f0:	e1 e9       	ldi	r30, 0x91	; 145
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	80 83       	st	Z, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	80 83       	st	Z, r24
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	9e e4       	ldi	r25, 0x4E	; 78
 304:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 308:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 30c:	08 95       	ret

0000030e <Display_Init>:
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	71 d1       	rcall	.+738    	; 0x5f4 <lcd_init>
 312:	4c c1       	rjmp	.+664    	; 0x5ac <lcd_clrscr>
 314:	08 95       	ret

00000316 <Port_Init>:
 316:	d0 df       	rcall	.-96     	; 0x2b8 <Init_Keypad>
 318:	fa df       	rcall	.-12     	; 0x30e <Display_Init>
 31a:	dc df       	rcall	.-72     	; 0x2d4 <Init_RGBLED>
 31c:	e1 df       	rcall	.-62     	; 0x2e0 <Init_Timer3Servo>
 31e:	de df       	rcall	.-68     	; 0x2dc <Init_Servo>
 320:	db cf       	rjmp	.-74     	; 0x2d8 <Init_LIGTH>
 322:	08 95       	ret

00000324 <ColumnScan>:
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	21 f4       	brne	.+8      	; 0x330 <ColumnScan+0xc>
 328:	2f ee       	ldi	r18, 0xEF	; 239
 32a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 32e:	08 95       	ret
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	91 05       	cpc	r25, r1
 334:	21 f4       	brne	.+8      	; 0x33e <ColumnScan+0x1a>
 336:	2f ed       	ldi	r18, 0xDF	; 223
 338:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 33c:	08 95       	ret
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	91 05       	cpc	r25, r1
 342:	21 f4       	brne	.+8      	; 0x34c <ColumnScan+0x28>
 344:	2f eb       	ldi	r18, 0xBF	; 191
 346:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 34a:	08 95       	ret
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	91 05       	cpc	r25, r1
 350:	19 f4       	brne	.+6      	; 0x358 <ColumnScan+0x34>
 352:	2f e7       	ldi	r18, 0x7F	; 127
 354:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 358:	08 95       	ret

0000035a <ReadRows>:
 35a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 35e:	20 fd       	sbrc	r18, 0
 360:	0f c0       	rjmp	.+30     	; 0x380 <ReadRows+0x26>
 362:	83 ec       	ldi	r24, 0xC3	; 195
 364:	99 e0       	ldi	r25, 0x09	; 9
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <ReadRows+0xc>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <ReadRows+0x12>
 36c:	00 00       	nop
 36e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 372:	82 2f       	mov	r24, r18
 374:	81 70       	andi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	91 95       	neg	r25
 37a:	81 95       	neg	r24
 37c:	91 09       	sbc	r25, r1
 37e:	08 95       	ret
 380:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 384:	81 fd       	sbrc	r24, 1
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <ReadRows+0x48>
 388:	83 ec       	ldi	r24, 0xC3	; 195
 38a:	99 e0       	ldi	r25, 0x09	; 9
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <ReadRows+0x32>
 390:	00 c0       	rjmp	.+0      	; 0x392 <ReadRows+0x38>
 392:	00 00       	nop
 394:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 398:	81 ff       	sbrs	r24, 1
 39a:	25 c0       	rjmp	.+74     	; 0x3e6 <ReadRows+0x8c>
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	08 95       	ret
 3a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3a6:	82 fd       	sbrc	r24, 2
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <ReadRows+0x6a>
 3aa:	83 ec       	ldi	r24, 0xC3	; 195
 3ac:	99 e0       	ldi	r25, 0x09	; 9
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <ReadRows+0x54>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <ReadRows+0x5a>
 3b4:	00 00       	nop
 3b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3ba:	82 ff       	sbrs	r24, 2
 3bc:	17 c0       	rjmp	.+46     	; 0x3ec <ReadRows+0x92>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	08 95       	ret
 3c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3c8:	83 fd       	sbrc	r24, 3
 3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <ReadRows+0x98>
 3cc:	83 ec       	ldi	r24, 0xC3	; 195
 3ce:	99 e0       	ldi	r25, 0x09	; 9
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <ReadRows+0x76>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <ReadRows+0x7c>
 3d6:	00 00       	nop
 3d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3dc:	83 ff       	sbrs	r24, 3
 3de:	0c c0       	rjmp	.+24     	; 0x3f8 <ReadRows+0x9e>
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	9f ef       	ldi	r25, 0xFF	; 255
 3e4:	08 95       	ret
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	08 95       	ret
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	08 95       	ret
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	08 95       	ret

000003fe <MatrixScanning>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	ce 01       	movw	r24, r28
 408:	8d df       	rcall	.-230    	; 0x324 <ColumnScan>
 40a:	a7 df       	rcall	.-178    	; 0x35a <ReadRows>
 40c:	8f 3f       	cpi	r24, 0xFF	; 255
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	92 07       	cpc	r25, r18
 412:	39 f4       	brne	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	c4 30       	cpi	r28, 0x04	; 4
 418:	d1 05       	cpc	r29, r1
 41a:	ac f3       	brlt	.-22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	f2 cf       	rjmp	.-28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 422:	cc 0f       	add	r28, r28
 424:	dd 1f       	adc	r29, r29
 426:	cc 0f       	add	r28, r28
 428:	dd 1f       	adc	r29, r29
 42a:	c2 5f       	subi	r28, 0xF2	; 242
 42c:	dd 4f       	sbci	r29, 0xFD	; 253
 42e:	c8 0f       	add	r28, r24
 430:	d9 1f       	adc	r29, r25
 432:	88 81       	ld	r24, Y
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <toggle_e>:
 43a:	e2 e0       	ldi	r30, 0x02	; 2
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	80 62       	ori	r24, 0x20	; 32
 442:	80 83       	st	Z, r24
 444:	00 00       	nop
 446:	80 81       	ld	r24, Z
 448:	8f 7d       	andi	r24, 0xDF	; 223
 44a:	80 83       	st	Z, r24
 44c:	08 95       	ret

0000044e <lcd_write>:
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
 452:	66 23       	and	r22, r22
 454:	31 f0       	breq	.+12     	; 0x462 <lcd_write+0x14>
 456:	e2 e0       	ldi	r30, 0x02	; 2
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	80 81       	ld	r24, Z
 45c:	80 61       	ori	r24, 0x10	; 16
 45e:	80 83       	st	Z, r24
 460:	05 c0       	rjmp	.+10     	; 0x46c <lcd_write+0x1e>
 462:	e2 e0       	ldi	r30, 0x02	; 2
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	80 81       	ld	r24, Z
 468:	8f 7e       	andi	r24, 0xEF	; 239
 46a:	80 83       	st	Z, r24
 46c:	e2 e0       	ldi	r30, 0x02	; 2
 46e:	f1 e0       	ldi	r31, 0x01	; 1
 470:	80 81       	ld	r24, Z
 472:	87 7f       	andi	r24, 0xF7	; 247
 474:	80 83       	st	Z, r24
 476:	a1 e0       	ldi	r26, 0x01	; 1
 478:	b1 e0       	ldi	r27, 0x01	; 1
 47a:	8c 91       	ld	r24, X
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	8c 93       	st	X, r24
 480:	24 9a       	sbi	0x04, 4	; 4
 482:	25 9a       	sbi	0x04, 5	; 4
 484:	26 9a       	sbi	0x04, 6	; 4
 486:	2e 98       	cbi	0x05, 6	; 5
 488:	2d 98       	cbi	0x05, 5	; 5
 48a:	2c 98       	cbi	0x05, 4	; 5
 48c:	80 81       	ld	r24, Z
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	80 83       	st	Z, r24
 492:	cc 23       	and	r28, r28
 494:	0c f4       	brge	.+2      	; 0x498 <lcd_write+0x4a>
 496:	2e 9a       	sbi	0x05, 6	; 5
 498:	c6 fd       	sbrc	r28, 6
 49a:	2d 9a       	sbi	0x05, 5	; 5
 49c:	c5 fd       	sbrc	r28, 5
 49e:	2c 9a       	sbi	0x05, 4	; 5
 4a0:	c4 ff       	sbrs	r28, 4
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <lcd_write+0x60>
 4a4:	e2 e0       	ldi	r30, 0x02	; 2
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	80 81       	ld	r24, Z
 4aa:	80 64       	ori	r24, 0x40	; 64
 4ac:	80 83       	st	Z, r24
 4ae:	c5 df       	rcall	.-118    	; 0x43a <toggle_e>
 4b0:	2e 98       	cbi	0x05, 6	; 5
 4b2:	2d 98       	cbi	0x05, 5	; 5
 4b4:	2c 98       	cbi	0x05, 4	; 5
 4b6:	e2 e0       	ldi	r30, 0x02	; 2
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	80 81       	ld	r24, Z
 4bc:	8f 7b       	andi	r24, 0xBF	; 191
 4be:	80 83       	st	Z, r24
 4c0:	c3 fd       	sbrc	r28, 3
 4c2:	2e 9a       	sbi	0x05, 6	; 5
 4c4:	c2 fd       	sbrc	r28, 2
 4c6:	2d 9a       	sbi	0x05, 5	; 5
 4c8:	c1 fd       	sbrc	r28, 1
 4ca:	2c 9a       	sbi	0x05, 4	; 5
 4cc:	c0 ff       	sbrs	r28, 0
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <lcd_write+0x8c>
 4d0:	e2 e0       	ldi	r30, 0x02	; 2
 4d2:	f1 e0       	ldi	r31, 0x01	; 1
 4d4:	80 81       	ld	r24, Z
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	80 83       	st	Z, r24
 4da:	af df       	rcall	.-162    	; 0x43a <toggle_e>
 4dc:	e2 e0       	ldi	r30, 0x02	; 2
 4de:	f1 e0       	ldi	r31, 0x01	; 1
 4e0:	80 81       	ld	r24, Z
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	80 83       	st	Z, r24
 4e6:	2c 9a       	sbi	0x05, 4	; 5
 4e8:	2d 9a       	sbi	0x05, 5	; 5
 4ea:	2e 9a       	sbi	0x05, 6	; 5
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <lcd_read>:
 4f0:	88 23       	and	r24, r24
 4f2:	31 f0       	breq	.+12     	; 0x500 <lcd_read+0x10>
 4f4:	e2 e0       	ldi	r30, 0x02	; 2
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	80 81       	ld	r24, Z
 4fa:	80 61       	ori	r24, 0x10	; 16
 4fc:	80 83       	st	Z, r24
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <lcd_read+0x1a>
 500:	e2 e0       	ldi	r30, 0x02	; 2
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	80 81       	ld	r24, Z
 506:	8f 7e       	andi	r24, 0xEF	; 239
 508:	80 83       	st	Z, r24
 50a:	e2 e0       	ldi	r30, 0x02	; 2
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	80 81       	ld	r24, Z
 510:	88 60       	ori	r24, 0x08	; 8
 512:	80 83       	st	Z, r24
 514:	a1 e0       	ldi	r26, 0x01	; 1
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	8c 91       	ld	r24, X
 51a:	8f 7b       	andi	r24, 0xBF	; 191
 51c:	8c 93       	st	X, r24
 51e:	24 98       	cbi	0x04, 4	; 4
 520:	25 98       	cbi	0x04, 5	; 4
 522:	26 98       	cbi	0x04, 6	; 4
 524:	80 81       	ld	r24, Z
 526:	80 62       	ori	r24, 0x20	; 32
 528:	80 83       	st	Z, r24
 52a:	00 00       	nop
 52c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 530:	86 ff       	sbrs	r24, 6
 532:	02 c0       	rjmp	.+4      	; 0x538 <lcd_read+0x48>
 534:	80 e1       	ldi	r24, 0x10	; 16
 536:	01 c0       	rjmp	.+2      	; 0x53a <lcd_read+0x4a>
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	1c 99       	sbic	0x03, 4	; 3
 53c:	80 62       	ori	r24, 0x20	; 32
 53e:	1d 99       	sbic	0x03, 5	; 3
 540:	80 64       	ori	r24, 0x40	; 64
 542:	1e 99       	sbic	0x03, 6	; 3
 544:	80 68       	ori	r24, 0x80	; 128
 546:	e2 e0       	ldi	r30, 0x02	; 2
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	90 81       	ld	r25, Z
 54c:	9f 7d       	andi	r25, 0xDF	; 223
 54e:	90 83       	st	Z, r25
 550:	00 00       	nop
 552:	90 81       	ld	r25, Z
 554:	90 62       	ori	r25, 0x20	; 32
 556:	90 83       	st	Z, r25
 558:	00 00       	nop
 55a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 55e:	96 fd       	sbrc	r25, 6
 560:	81 60       	ori	r24, 0x01	; 1
 562:	1c 99       	sbic	0x03, 4	; 3
 564:	82 60       	ori	r24, 0x02	; 2
 566:	1d 99       	sbic	0x03, 5	; 3
 568:	84 60       	ori	r24, 0x04	; 4
 56a:	1e 99       	sbic	0x03, 6	; 3
 56c:	88 60       	ori	r24, 0x08	; 8
 56e:	e2 e0       	ldi	r30, 0x02	; 2
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	90 81       	ld	r25, Z
 574:	9f 7d       	andi	r25, 0xDF	; 223
 576:	90 83       	st	Z, r25
 578:	08 95       	ret

0000057a <lcd_waitbusy>:
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	b9 df       	rcall	.-142    	; 0x4f0 <lcd_read>
 57e:	88 23       	and	r24, r24
 580:	e4 f3       	brlt	.-8      	; 0x57a <lcd_waitbusy>
 582:	00 c0       	rjmp	.+0      	; 0x584 <lcd_waitbusy+0xa>
 584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_waitbusy+0xc>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	b3 cf       	rjmp	.-154    	; 0x4f0 <lcd_read>
 58a:	08 95       	ret

0000058c <lcd_command>:
 58c:	cf 93       	push	r28
 58e:	c8 2f       	mov	r28, r24
 590:	f4 df       	rcall	.-24     	; 0x57a <lcd_waitbusy>
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	8c 2f       	mov	r24, r28
 596:	5b df       	rcall	.-330    	; 0x44e <lcd_write>
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <lcd_gotoxy>:
 59c:	61 11       	cpse	r22, r1
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <lcd_gotoxy+0xa>
 5a0:	80 58       	subi	r24, 0x80	; 128
 5a2:	f4 cf       	rjmp	.-24     	; 0x58c <lcd_command>
 5a4:	08 95       	ret
 5a6:	80 54       	subi	r24, 0x40	; 64
 5a8:	f1 cf       	rjmp	.-30     	; 0x58c <lcd_command>
 5aa:	08 95       	ret

000005ac <lcd_clrscr>:
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	ee cf       	rjmp	.-36     	; 0x58c <lcd_command>
 5b0:	08 95       	ret

000005b2 <lcd_putc>:
 5b2:	cf 93       	push	r28
 5b4:	c8 2f       	mov	r28, r24
 5b6:	e1 df       	rcall	.-62     	; 0x57a <lcd_waitbusy>
 5b8:	ca 30       	cpi	r28, 0x0A	; 10
 5ba:	41 f4       	brne	.+16     	; 0x5cc <lcd_putc+0x1a>
 5bc:	80 34       	cpi	r24, 0x40	; 64
 5be:	10 f0       	brcs	.+4      	; 0x5c4 <lcd_putc+0x12>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <lcd_putc+0x14>
 5c4:	80 e4       	ldi	r24, 0x40	; 64
 5c6:	80 58       	subi	r24, 0x80	; 128
 5c8:	e1 df       	rcall	.-62     	; 0x58c <lcd_command>
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <lcd_putc+0x20>
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	8c 2f       	mov	r24, r28
 5d0:	3e df       	rcall	.-388    	; 0x44e <lcd_write>
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <lcd_puts>:
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	ec 01       	movw	r28, r24
 5dc:	21 96       	adiw	r28, 0x01	; 1
 5de:	fc 01       	movw	r30, r24
 5e0:	80 81       	ld	r24, Z
 5e2:	88 23       	and	r24, r24
 5e4:	21 f0       	breq	.+8      	; 0x5ee <lcd_puts+0x18>
 5e6:	e5 df       	rcall	.-54     	; 0x5b2 <lcd_putc>
 5e8:	89 91       	ld	r24, Y+
 5ea:	81 11       	cpse	r24, r1
 5ec:	fc cf       	rjmp	.-8      	; 0x5e6 <lcd_puts+0x10>
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <lcd_init>:
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	18 2f       	mov	r17, r24
 5fc:	e1 e0       	ldi	r30, 0x01	; 1
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	80 81       	ld	r24, Z
 602:	80 61       	ori	r24, 0x10	; 16
 604:	80 83       	st	Z, r24
 606:	80 81       	ld	r24, Z
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	80 83       	st	Z, r24
 60c:	80 81       	ld	r24, Z
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	80 83       	st	Z, r24
 612:	80 81       	ld	r24, Z
 614:	80 64       	ori	r24, 0x40	; 64
 616:	80 83       	st	Z, r24
 618:	24 9a       	sbi	0x04, 4	; 4
 61a:	25 9a       	sbi	0x04, 5	; 4
 61c:	26 9a       	sbi	0x04, 6	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61e:	8f e9       	ldi	r24, 0x9F	; 159
 620:	9f e0       	ldi	r25, 0x0F	; 15
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <lcd_init+0x2e>
 626:	00 c0       	rjmp	.+0      	; 0x628 <lcd_init+0x34>
 628:	00 00       	nop
 62a:	2c 9a       	sbi	0x05, 4	; 5
 62c:	c2 e0       	ldi	r28, 0x02	; 2
 62e:	d1 e0       	ldi	r29, 0x01	; 1
 630:	88 81       	ld	r24, Y
 632:	80 64       	ori	r24, 0x40	; 64
 634:	88 83       	st	Y, r24
 636:	01 df       	rcall	.-510    	; 0x43a <toggle_e>
 638:	81 ee       	ldi	r24, 0xE1	; 225
 63a:	94 e0       	ldi	r25, 0x04	; 4
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <lcd_init+0x48>
 640:	00 c0       	rjmp	.+0      	; 0x642 <lcd_init+0x4e>
 642:	00 00       	nop
 644:	fa de       	rcall	.-524    	; 0x43a <toggle_e>
 646:	95 e1       	ldi	r25, 0x15	; 21
 648:	9a 95       	dec	r25
 64a:	f1 f7       	brne	.-4      	; 0x648 <lcd_init+0x54>
 64c:	00 00       	nop
 64e:	f5 de       	rcall	.-534    	; 0x43a <toggle_e>
 650:	85 e1       	ldi	r24, 0x15	; 21
 652:	8a 95       	dec	r24
 654:	f1 f7       	brne	.-4      	; 0x652 <lcd_init+0x5e>
 656:	00 00       	nop
 658:	88 81       	ld	r24, Y
 65a:	8f 7b       	andi	r24, 0xBF	; 191
 65c:	88 83       	st	Y, r24
 65e:	ed de       	rcall	.-550    	; 0x43a <toggle_e>
 660:	95 e1       	ldi	r25, 0x15	; 21
 662:	9a 95       	dec	r25
 664:	f1 f7       	brne	.-4      	; 0x662 <lcd_init+0x6e>
 666:	00 00       	nop
 668:	88 e2       	ldi	r24, 0x28	; 40
 66a:	90 df       	rcall	.-224    	; 0x58c <lcd_command>
 66c:	88 e0       	ldi	r24, 0x08	; 8
 66e:	8e df       	rcall	.-228    	; 0x58c <lcd_command>
 670:	9d df       	rcall	.-198    	; 0x5ac <lcd_clrscr>
 672:	86 e0       	ldi	r24, 0x06	; 6
 674:	8b df       	rcall	.-234    	; 0x58c <lcd_command>
 676:	81 2f       	mov	r24, r17
 678:	89 df       	rcall	.-238    	; 0x58c <lcd_command>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	08 95       	ret

00000682 <DisplayInput>:
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	29 97       	sbiw	r28, 0x09	; 9
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	7c 01       	movw	r14, r24
 6a4:	83 df       	rcall	.-250    	; 0x5ac <lcd_clrscr>
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	76 df       	rcall	.-276    	; 0x59c <lcd_gotoxy>
 6b0:	8e e1       	ldi	r24, 0x1E	; 30
 6b2:	92 e0       	ldi	r25, 0x02	; 2
 6b4:	90 df       	rcall	.-224    	; 0x5d6 <lcd_puts>
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	6e df       	rcall	.-292    	; 0x59c <lcd_gotoxy>
 6c0:	1a 82       	std	Y+2, r1	; 0x02
 6c2:	19 82       	std	Y+1, r1	; 0x01
 6c4:	fe 01       	movw	r30, r28
 6c6:	33 96       	adiw	r30, 0x03	; 3
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	df 01       	movw	r26, r30
 6cc:	1d 92       	st	X+, r1
 6ce:	8a 95       	dec	r24
 6d0:	e9 f7       	brne	.-6      	; 0x6cc <DisplayInput+0x4a>
 6d2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
 6d6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
 6da:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
 6de:	8f 83       	std	Y+7, r24	; 0x07
 6e0:	98 87       	std	Y+8, r25	; 0x08
 6e2:	a9 87       	std	Y+9, r26	; 0x09
 6e4:	67 01       	movw	r12, r14
 6e6:	00 e0       	ldi	r16, 0x00	; 0
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <DisplayInput+0x84>
 6ec:	f6 01       	movw	r30, r12
 6ee:	81 91       	ld	r24, Z+
 6f0:	6f 01       	movw	r12, r30
 6f2:	8a 32       	cpi	r24, 0x2A	; 42
 6f4:	31 f0       	breq	.+12     	; 0x702 <DisplayInput+0x80>
 6f6:	be 01       	movw	r22, r28
 6f8:	69 5f       	subi	r22, 0xF9	; 249
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	ce 01       	movw	r24, r28
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	1f d1       	rcall	.+574    	; 0x940 <strcat>
 702:	0f 5f       	subi	r16, 0xFF	; 255
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	f7 01       	movw	r30, r14
 708:	01 90       	ld	r0, Z+
 70a:	00 20       	and	r0, r0
 70c:	e9 f7       	brne	.-6      	; 0x708 <DisplayInput+0x86>
 70e:	31 97       	sbiw	r30, 0x01	; 1
 710:	ee 19       	sub	r30, r14
 712:	ff 09       	sbc	r31, r15
 714:	0e 17       	cp	r16, r30
 716:	1f 07       	cpc	r17, r31
 718:	48 f3       	brcs	.-46     	; 0x6ec <DisplayInput+0x6a>
 71a:	ce 01       	movw	r24, r28
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	5b df       	rcall	.-330    	; 0x5d6 <lcd_puts>
 720:	29 96       	adiw	r28, 0x09	; 9
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	ff 90       	pop	r15
 736:	ef 90       	pop	r14
 738:	df 90       	pop	r13
 73a:	cf 90       	pop	r12
 73c:	08 95       	ret

0000073e <DisplayPinCheck>:
 73e:	36 df       	rcall	.-404    	; 0x5ac <lcd_clrscr>
 740:	88 e2       	ldi	r24, 0x28	; 40
 742:	92 e0       	ldi	r25, 0x02	; 2
 744:	48 cf       	rjmp	.-368    	; 0x5d6 <lcd_puts>
 746:	08 95       	ret

00000748 <DisplayDoorLocked>:
 748:	31 df       	rcall	.-414    	; 0x5ac <lcd_clrscr>
 74a:	f9 df       	rcall	.-14     	; 0x73e <DisplayPinCheck>
 74c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74e:	8d e3       	ldi	r24, 0x3D	; 61
 750:	99 e4       	ldi	r25, 0x49	; 73
 752:	21 50       	subi	r18, 0x01	; 1
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	e1 f7       	brne	.-8      	; 0x752 <DisplayDoorLocked+0xa>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <DisplayDoorLocked+0x14>
 75c:	00 00       	nop
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	1a df       	rcall	.-460    	; 0x59c <lcd_gotoxy>
 768:	86 e3       	ldi	r24, 0x36	; 54
 76a:	92 e0       	ldi	r25, 0x02	; 2
 76c:	34 df       	rcall	.-408    	; 0x5d6 <lcd_puts>
 76e:	2f ef       	ldi	r18, 0xFF	; 255
 770:	8d e3       	ldi	r24, 0x3D	; 61
 772:	99 e4       	ldi	r25, 0x49	; 73
 774:	21 50       	subi	r18, 0x01	; 1
 776:	80 40       	sbci	r24, 0x00	; 0
 778:	90 40       	sbci	r25, 0x00	; 0
 77a:	e1 f7       	brne	.-8      	; 0x774 <DisplayDoorLocked+0x2c>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <DisplayDoorLocked+0x36>
 77e:	00 00       	nop
 780:	08 95       	ret

00000782 <DisplayLockOpen>:
 782:	dd df       	rcall	.-70     	; 0x73e <DisplayPinCheck>
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	8d e3       	ldi	r24, 0x3D	; 61
 788:	99 e4       	ldi	r25, 0x49	; 73
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <DisplayLockOpen+0x8>
 792:	00 c0       	rjmp	.+0      	; 0x794 <DisplayLockOpen+0x12>
 794:	00 00       	nop
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	fe de       	rcall	.-516    	; 0x59c <lcd_gotoxy>
 7a0:	8d e3       	ldi	r24, 0x3D	; 61
 7a2:	92 e0       	ldi	r25, 0x02	; 2
 7a4:	18 df       	rcall	.-464    	; 0x5d6 <lcd_puts>
 7a6:	2f ef       	ldi	r18, 0xFF	; 255
 7a8:	8d e3       	ldi	r24, 0x3D	; 61
 7aa:	99 e4       	ldi	r25, 0x49	; 73
 7ac:	21 50       	subi	r18, 0x01	; 1
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	90 40       	sbci	r25, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <DisplayLockOpen+0x2a>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <DisplayLockOpen+0x34>
 7b6:	00 00       	nop
 7b8:	08 95       	ret

000007ba <DisplayError>:
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	ec 01       	movw	r28, r24
 7c0:	f5 de       	rcall	.-534    	; 0x5ac <lcd_clrscr>
 7c2:	86 e4       	ldi	r24, 0x46	; 70
 7c4:	92 e0       	ldi	r25, 0x02	; 2
 7c6:	07 df       	rcall	.-498    	; 0x5d6 <lcd_puts>
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	e5 de       	rcall	.-566    	; 0x59c <lcd_gotoxy>
 7d2:	c1 30       	cpi	r28, 0x01	; 1
 7d4:	d1 05       	cpc	r29, r1
 7d6:	19 f0       	breq	.+6      	; 0x7de <DisplayError+0x24>
 7d8:	22 97       	sbiw	r28, 0x02	; 2
 7da:	29 f0       	breq	.+10     	; 0x7e6 <DisplayError+0x2c>
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <DisplayError+0x32>
 7de:	87 e5       	ldi	r24, 0x57	; 87
 7e0:	92 e0       	ldi	r25, 0x02	; 2
 7e2:	f9 de       	rcall	.-526    	; 0x5d6 <lcd_puts>
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <DisplayError+0x32>
 7e6:	81 e6       	ldi	r24, 0x61	; 97
 7e8:	92 e0       	ldi	r25, 0x02	; 2
 7ea:	f5 de       	rcall	.-534    	; 0x5d6 <lcd_puts>
 7ec:	2f ef       	ldi	r18, 0xFF	; 255
 7ee:	8d e3       	ldi	r24, 0x3D	; 61
 7f0:	99 e4       	ldi	r25, 0x49	; 73
 7f2:	21 50       	subi	r18, 0x01	; 1
 7f4:	80 40       	sbci	r24, 0x00	; 0
 7f6:	90 40       	sbci	r25, 0x00	; 0
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <DisplayError+0x38>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <DisplayError+0x42>
 7fc:	00 00       	nop
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <DisplayLockout>:
 804:	d3 de       	rcall	.-602    	; 0x5ac <lcd_clrscr>
 806:	8d e6       	ldi	r24, 0x6D	; 109
 808:	92 e0       	ldi	r25, 0x02	; 2
 80a:	e5 de       	rcall	.-566    	; 0x5d6 <lcd_puts>
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	c3 de       	rcall	.-634    	; 0x59c <lcd_gotoxy>
 816:	8d e7       	ldi	r24, 0x7D	; 125
 818:	92 e0       	ldi	r25, 0x02	; 2
 81a:	dd ce       	rjmp	.-582    	; 0x5d6 <lcd_puts>
 81c:	08 95       	ret

0000081e <DisplayMyHomeGreeting>:
 81e:	c6 de       	rcall	.-628    	; 0x5ac <lcd_clrscr>
 820:	8b e8       	ldi	r24, 0x8B	; 139
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	d8 de       	rcall	.-592    	; 0x5d6 <lcd_puts>
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	b6 de       	rcall	.-660    	; 0x59c <lcd_gotoxy>
 830:	86 e9       	ldi	r24, 0x96	; 150
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	d0 de       	rcall	.-608    	; 0x5d6 <lcd_puts>
 836:	2f ef       	ldi	r18, 0xFF	; 255
 838:	8d e3       	ldi	r24, 0x3D	; 61
 83a:	99 e4       	ldi	r25, 0x49	; 73
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	80 40       	sbci	r24, 0x00	; 0
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <DisplayMyHomeGreeting+0x1e>
 844:	00 c0       	rjmp	.+0      	; 0x846 <DisplayMyHomeGreeting+0x28>
 846:	00 00       	nop
 848:	08 95       	ret

0000084a <DisplayChoices>:
 84a:	b0 de       	rcall	.-672    	; 0x5ac <lcd_clrscr>
 84c:	8e e9       	ldi	r24, 0x9E	; 158
 84e:	92 e0       	ldi	r25, 0x02	; 2
 850:	c2 de       	rcall	.-636    	; 0x5d6 <lcd_puts>
 852:	87 ea       	ldi	r24, 0xA7	; 167
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	bf de       	rcall	.-642    	; 0x5d6 <lcd_puts>
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	9d de       	rcall	.-710    	; 0x59c <lcd_gotoxy>
 862:	80 eb       	ldi	r24, 0xB0	; 176
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	b7 ce       	rjmp	.-658    	; 0x5d6 <lcd_puts>
 868:	08 95       	ret

0000086a <main>:
int main(void)
{
	char buffer[7];


	Port_Init();
 86a:	55 dd       	rcall	.-1366   	; 0x316 <Port_Init>
    /* Replace with your application code */
    while (1) 
    {
		
		Doorlock();
 86c:	06 dd       	rcall	.-1524   	; 0x27a <Doorlock>
 86e:	fe cf       	rjmp	.-4      	; 0x86c <main+0x2>

00000870 <ToggleLight>:
 870:	92 b1       	in	r25, 0x02	; 2
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	89 27       	eor	r24, r25
 876:	82 b9       	out	0x02, r24	; 2
 878:	08 95       	ret

0000087a <ToggleGarage>:
 87a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <switcher.1791>
 87e:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <switcher.1791+0x1>
 882:	00 97       	sbiw	r24, 0x00	; 0
 884:	91 f4       	brne	.+36     	; 0x8aa <ToggleGarage+0x30>
 886:	84 ef       	ldi	r24, 0xF4	; 244
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	e8 e9       	ldi	r30, 0x98	; 152
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	91 83       	std	Z+1, r25	; 0x01
 890:	80 83       	st	Z, r24
 892:	af e9       	ldi	r26, 0x9F	; 159
 894:	bf e0       	ldi	r27, 0x0F	; 15
 896:	11 97       	sbiw	r26, 0x01	; 1
 898:	f1 f7       	brne	.-4      	; 0x896 <ToggleGarage+0x1c>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <ToggleGarage+0x22>
 89c:	00 00       	nop
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	88 32       	cpi	r24, 0x28	; 40
 8a2:	ba e0       	ldi	r27, 0x0A	; 10
 8a4:	9b 07       	cpc	r25, r27
 8a6:	99 f7       	brne	.-26     	; 0x88e <ToggleGarage+0x14>
 8a8:	13 c0       	rjmp	.+38     	; 0x8d0 <ToggleGarage+0x56>
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	89 f4       	brne	.+34     	; 0x8d0 <ToggleGarage+0x56>
 8ae:	88 e2       	ldi	r24, 0x28	; 40
 8b0:	9a e0       	ldi	r25, 0x0A	; 10
 8b2:	e8 e9       	ldi	r30, 0x98	; 152
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	91 83       	std	Z+1, r25	; 0x01
 8b8:	80 83       	st	Z, r24
 8ba:	af e9       	ldi	r26, 0x9F	; 159
 8bc:	bf e0       	ldi	r27, 0x0F	; 15
 8be:	11 97       	sbiw	r26, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <ToggleGarage+0x44>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <ToggleGarage+0x4a>
 8c4:	00 00       	nop
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	84 3f       	cpi	r24, 0xF4	; 244
 8ca:	b1 e0       	ldi	r27, 0x01	; 1
 8cc:	9b 07       	cpc	r25, r27
 8ce:	99 f7       	brne	.-26     	; 0x8b6 <ToggleGarage+0x3c>
 8d0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <switcher.1791>
 8d4:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <switcher.1791+0x1>
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	91 05       	cpc	r25, r1
 8de:	2c f4       	brge	.+10     	; 0x8ea <ToggleGarage+0x70>
 8e0:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <switcher.1791+0x1>
 8e4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <switcher.1791>
 8e8:	08 95       	ret
 8ea:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <switcher.1791+0x1>
 8ee:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <switcher.1791>
 8f2:	08 95       	ret

000008f4 <HouseController>:
 8f4:	82 34       	cpi	r24, 0x42	; 66
 8f6:	31 f0       	breq	.+12     	; 0x904 <HouseController+0x10>
 8f8:	83 34       	cpi	r24, 0x43	; 67
 8fa:	31 f0       	breq	.+12     	; 0x908 <HouseController+0x14>
 8fc:	81 34       	cpi	r24, 0x41	; 65
 8fe:	29 f4       	brne	.+10     	; 0x90a <HouseController+0x16>
 900:	b7 cf       	rjmp	.-146    	; 0x870 <ToggleLight>
 902:	08 95       	ret
 904:	ba cf       	rjmp	.-140    	; 0x87a <ToggleGarage>
 906:	08 95       	ret
 908:	c5 cc       	rjmp	.-1654   	; 0x294 <LockDoor>
 90a:	08 95       	ret

0000090c <HouseMenu>:
 90c:	9e df       	rcall	.-196    	; 0x84a <DisplayChoices>
 90e:	0b c0       	rjmp	.+22     	; 0x926 <HouseMenu+0x1a>
 910:	76 dd       	rcall	.-1300   	; 0x3fe <MatrixScanning>
 912:	f0 df       	rcall	.-32     	; 0x8f4 <HouseController>
 914:	2f ef       	ldi	r18, 0xFF	; 255
 916:	83 ec       	ldi	r24, 0xC3	; 195
 918:	99 e0       	ldi	r25, 0x09	; 9
 91a:	21 50       	subi	r18, 0x01	; 1
 91c:	80 40       	sbci	r24, 0x00	; 0
 91e:	90 40       	sbci	r25, 0x00	; 0
 920:	e1 f7       	brne	.-8      	; 0x91a <HouseMenu+0xe>
 922:	00 c0       	rjmp	.+0      	; 0x924 <HouseMenu+0x18>
 924:	00 00       	nop
 926:	bc dc       	rcall	.-1672   	; 0x2a0 <CheckLock>
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	91 f3       	breq	.-28     	; 0x910 <HouseMenu+0x4>
 92c:	08 95       	ret

0000092e <Toggle_Red>:
	RGB_TOGGLE_BLUE;
}

// Tænder for gult Lys
void Toggle_Yellow(){
	RGB_TOGGLE_YELLow;
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	81 bb       	out	0x11, r24	; 17
 932:	08 95       	ret

00000934 <Toggle_Blue>:
 934:	84 e0       	ldi	r24, 0x04	; 4
 936:	81 bb       	out	0x11, r24	; 17
 938:	08 95       	ret

0000093a <Toggle_Green>:
}

// Tænder får Grønt lys
void Toggle_Green(){
	RGB_TOGGLE_GREEN;
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	81 bb       	out	0x11, r24	; 17
 93e:	08 95       	ret

00000940 <strcat>:
 940:	fb 01       	movw	r30, r22
 942:	dc 01       	movw	r26, r24
 944:	0d 90       	ld	r0, X+
 946:	00 20       	and	r0, r0
 948:	e9 f7       	brne	.-6      	; 0x944 <strcat+0x4>
 94a:	11 97       	sbiw	r26, 0x01	; 1
 94c:	01 90       	ld	r0, Z+
 94e:	0d 92       	st	X+, r0
 950:	00 20       	and	r0, r0
 952:	e1 f7       	brne	.-8      	; 0x94c <strcat+0xc>
 954:	08 95       	ret

00000956 <strcmp>:
 956:	fb 01       	movw	r30, r22
 958:	dc 01       	movw	r26, r24
 95a:	8d 91       	ld	r24, X+
 95c:	01 90       	ld	r0, Z+
 95e:	80 19       	sub	r24, r0
 960:	01 10       	cpse	r0, r1
 962:	d9 f3       	breq	.-10     	; 0x95a <strcmp+0x4>
 964:	99 0b       	sbc	r25, r25
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
