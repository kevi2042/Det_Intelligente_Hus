
Kevin Wolff Det Intelligente Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  000006ae  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800242  00800242  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002211  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001409  00000000  00000000  00002ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f58  00000000  00000000  00003fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000867  00000000  00000000  00005270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca6  00000000  00000000  00005ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000677d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 34       	cpi	r26, 0x42	; 66
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e4       	ldi	r26, 0x42	; 66
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 34       	cpi	r26, 0x48	; 72
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ad d2       	rcall	.+1370   	; 0x67a <main>
 120:	c4 c2       	rjmp	.+1416   	; 0x6aa <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LockCheck>:
	
}

int LockCheck(char input[], char hiddenPin[]){
	// ved strcmp returnere den 0 hvis begge strings er ens.
	int cmpvalue = strcmp(input, hiddenPin);
 124:	b9 d2       	rcall	.+1394   	; 0x698 <strcmp>
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	89 2b       	or	r24, r25
 12c:	11 f0       	breq	.+4      	; 0x132 <LockCheck+0xe>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
 132:	c9 01       	movw	r24, r18
 134:	08 95       	ret

00000136 <TestInputLength>:
		char string[] = {charakter, "\0"};
		strcat(input, string);
	}
}

int TestInputLength(char input[]){
 136:	fc 01       	movw	r30, r24
	if(strlen(input) == 4){
 138:	dc 01       	movw	r26, r24
 13a:	0d 90       	ld	r0, X+
 13c:	00 20       	and	r0, r0
 13e:	e9 f7       	brne	.-6      	; 0x13a <TestInputLength+0x4>
 140:	9d 01       	movw	r18, r26
 142:	25 50       	subi	r18, 0x05	; 5
 144:	31 09       	sbc	r19, r1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2e 17       	cp	r18, r30
 14c:	3f 07       	cpc	r19, r31
 14e:	11 f0       	breq	.+4      	; 0x154 <TestInputLength+0x1e>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
 154:	08 95       	ret

00000156 <AddCharacter>:
	else{
		return 0;
	}
}

void AddCharacter(char charakter){
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	1f 92       	push	r1
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	18 2f       	mov	r17, r24
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	if(TestInputLength(input) == 0){
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	e5 df       	rcall	.-54     	; 0x136 <TestInputLength>
 16c:	89 2b       	or	r24, r25
 16e:	51 f4       	brne	.+20     	; 0x184 <AddCharacter+0x2e>
		char string[] = {charakter, "\0"};
 170:	19 83       	std	Y+1, r17	; 0x01
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	8a 83       	std	Y+2, r24	; 0x02
		strcat(input, string);
 178:	be 01       	movw	r22, r28
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	7f d2       	rcall	.+1278   	; 0x682 <strcat>
	}
}
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	08 95       	ret

00000190 <OpenLock>:
#include <util/delay.h>


static char input[6] = "";

void OpenLock(){
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <OpenLock+0x6>
 196:	1f 92       	push	r1
 198:	1f 92       	push	r1
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	char hiddenPin[] = "1234";
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	e2 e0       	ldi	r30, 0x02	; 2
 1a2:	f2 e0       	ldi	r31, 0x02	; 2
 1a4:	de 01       	movw	r26, r28
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	01 90       	ld	r0, Z+
 1aa:	0d 92       	st	X+, r0
 1ac:	8a 95       	dec	r24
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <OpenLock+0x18>
	static int wrongPinCount = 0;
	
	//Checking Lock
	DisplayClear();
 1b0:	4d d2       	rcall	.+1178   	; 0x64c <DisplayClear>
	DisplayLockCheck();
 1b2:	4e d2       	rcall	.+1180   	; 0x650 <DisplayLockCheck>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	87 ea       	ldi	r24, 0xA7	; 167
 1b8:	91 e6       	ldi	r25, 0x61	; 97
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <OpenLock+0x2a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <OpenLock+0x34>
 1c4:	00 00       	nop
 1c6:	be 01       	movw	r22, r28
	_delay_ms(2000);
	
	if(LockCheck(input, hiddenPin) == 1){
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	82 e4       	ldi	r24, 0x42	; 66
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	a9 df       	rcall	.-174    	; 0x124 <LockCheck>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <OpenLock+0x5c>
		// do nothing
		DisplayLockOpen();
 1d6:	4d d2       	rcall	.+1178   	; 0x672 <DisplayLockOpen>
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	87 ea       	ldi	r24, 0xA7	; 167
 1dc:	91 e6       	ldi	r25, 0x61	; 97
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <OpenLock+0x4e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <OpenLock+0x58>
 1e8:	00 00       	nop
 1ea:	2b c0       	rjmp	.+86     	; 0x242 <OpenLock+0xb2>
			AddCharacter(result);
			_delay_ms(400);
		}
	}
	
}
 1ec:	61 e0       	ldi	r22, 0x01	; 1
		// do nothing
		DisplayLockOpen();
		_delay_ms(2000);
	}
	else{
		lcd_gotoxy(0,1);
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
		//Display "Locked"
		DisplayClear();
 1f4:	82 d1       	rcall	.+772    	; 0x4fa <lcd_gotoxy>
 1f6:	2a d2       	rcall	.+1108   	; 0x64c <DisplayClear>
		DisplayDoorLocked();
 1f8:	2f d2       	rcall	.+1118   	; 0x658 <DisplayDoorLocked>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	87 ea       	ldi	r24, 0xA7	; 167
 1fe:	91 e6       	ldi	r25, 0x61	; 97
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <OpenLock+0x70>
 208:	00 c0       	rjmp	.+0      	; 0x20a <OpenLock+0x7a>
		_delay_ms(2000);
	
		while (1)
		{
			DisplayClear();
 20a:	00 00       	nop
 20c:	1f d2       	rcall	.+1086   	; 0x64c <DisplayClear>
			lcd_gotoxy(0,0);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	71 d1       	rcall	.+738    	; 0x4fa <lcd_gotoxy>
			DisplayInputPin();
 218:	23 d2       	rcall	.+1094   	; 0x660 <DisplayInputPin>
			lcd_gotoxy(0,1);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	6b d1       	rcall	.+726    	; 0x4fa <lcd_gotoxy>
 224:	82 e4       	ldi	r24, 0x42	; 66
			DisplayInput(input);
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	db d1       	rcall	.+950    	; 0x5e0 <DisplayInput>
 22a:	98 d0       	rcall	.+304    	; 0x35c <MatrixScanning>
 22c:	94 df       	rcall	.-216    	; 0x156 <AddCharacter>
			char result = MatrixScanning();
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	87 e8       	ldi	r24, 0x87	; 135
			AddCharacter(result);
 232:	93 e1       	ldi	r25, 0x13	; 19
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <OpenLock+0xa4>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <OpenLock+0xae>
 23e:	00 00       	nop
 240:	e5 cf       	rjmp	.-54     	; 0x20c <OpenLock+0x7c>
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
			_delay_ms(400);
		}
	}
	
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <Init_Keypad>:
	Init_RGBLED();
}

void Init_Keypad(){
		//sætter input port (Pull up) på matrix keypad
		MATRIX_DDR &= ~MATRIX_DDR_INPUTPORT;
 252:	e7 e0       	ldi	r30, 0x07	; 7
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	80 81       	ld	r24, Z
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 83       	st	Z, r24
		
		// PK0-3 er High, PK4-7 er Low
		MATRIX_DDR |= MATRIX_DDR_OUTPUTPORT;
 25c:	80 81       	ld	r24, Z
 25e:	80 6f       	ori	r24, 0xF0	; 240
 260:	80 83       	st	Z, r24
		MATRIX_PORT |= 0xFF;
 262:	e8 e0       	ldi	r30, 0x08	; 8
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <Init_RGBLED>:
		////	PK3	 0	 0	 0	 0
}

void Init_RGBLED(){
	//sætter input port (pull up) på RGB LED
	RGB_DDR &= ~RGB_DDR_INPUTPORT;
 26e:	80 98       	cbi	0x10, 0	; 16
 270:	08 95       	ret

00000272 <Display_Init>:
}

//initialiserer display
void Display_Init(){
	/* initialize display, cursor on */
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	6e d1       	rcall	.+732    	; 0x552 <lcd_init>

	/* clear display and home cursor */
	lcd_clrscr();
 276:	49 c1       	rjmp	.+658    	; 0x50a <lcd_clrscr>
 278:	08 95       	ret

0000027a <Port_Init>:
 27a:	eb df       	rcall	.-42     	; 0x252 <Init_Keypad>


//initialiser portne
void Port_Init(){
	Init_Keypad();
	Display_Init();
 27c:	fa df       	rcall	.-12     	; 0x272 <Display_Init>
	Init_RGBLED();
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <Init_RGBLED>
 280:	08 95       	ret

00000282 <ColumnScan>:
 282:	00 97       	sbiw	r24, 0x00	; 0
	return DecodeKeyboard(column, row);
}

//scanner columns efter hvilken der er blevet klikket på
int ColumnScan(int column){
	if(column == 0){
 284:	21 f4       	brne	.+8      	; 0x28e <ColumnScan+0xc>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT0;
 286:	2f ee       	ldi	r18, 0xEF	; 239
 288:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 28c:	08 95       	ret
	}
	else if(column == 1){
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	91 05       	cpc	r25, r1
 292:	21 f4       	brne	.+8      	; 0x29c <ColumnScan+0x1a>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT1;
 294:	2f ed       	ldi	r18, 0xDF	; 223
 296:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 29a:	08 95       	ret
	}
	else if(column == 2){
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	21 f4       	brne	.+8      	; 0x2aa <ColumnScan+0x28>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT2;
 2a2:	2f eb       	ldi	r18, 0xBF	; 191
 2a4:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 2a8:	08 95       	ret
	}
	else if(column == 3){
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	91 05       	cpc	r25, r1
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <ColumnScan+0x34>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT3;
 2b0:	2f e7       	ldi	r18, 0x7F	; 127
 2b2:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	}
	
	return column;
}
 2b6:	08 95       	ret

000002b8 <ReadRows>:

// læser hvilken row der er klikket på
int ReadRows(){
 	if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 2b8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2bc:	20 fd       	sbrc	r18, 0
 2be:	0f c0       	rjmp	.+30     	; 0x2de <ReadRows+0x26>
 2c0:	83 ec       	ldi	r24, 0xC3	; 195
 2c2:	99 e0       	ldi	r25, 0x09	; 9
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <ReadRows+0xc>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ReadRows+0x12>
 2ca:	00 00       	nop
		 _delay_ms(10);
		 if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 2cc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2d0:	82 2f       	mov	r24, r18
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	91 95       	neg	r25
 2d8:	81 95       	neg	r24
 2da:	91 09       	sbc	r25, r1
 2dc:	08 95       	ret
		 }
		 else{
			 return -1;
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
 2de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2e2:	81 fd       	sbrc	r24, 1
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <ReadRows+0x48>
 2e6:	83 ec       	ldi	r24, 0xC3	; 195
 2e8:	99 e0       	ldi	r25, 0x09	; 9
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <ReadRows+0x32>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <ReadRows+0x38>
 2f0:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
 2f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2f6:	81 ff       	sbrs	r24, 1
 2f8:	25 c0       	rjmp	.+74     	; 0x344 <ReadRows+0x8c>
			return 1;
		}
		else{
			return -1;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	9f ef       	ldi	r25, 0xFF	; 255
 2fe:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
 300:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 304:	82 fd       	sbrc	r24, 2
 306:	0d c0       	rjmp	.+26     	; 0x322 <ReadRows+0x6a>
 308:	83 ec       	ldi	r24, 0xC3	; 195
 30a:	99 e0       	ldi	r25, 0x09	; 9
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <ReadRows+0x54>
 310:	00 c0       	rjmp	.+0      	; 0x312 <ReadRows+0x5a>
 312:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
 314:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 318:	82 ff       	sbrs	r24, 2
 31a:	17 c0       	rjmp	.+46     	; 0x34a <ReadRows+0x92>
			return 2;
		}
		else{
			return -1;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
 322:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 326:	83 fd       	sbrc	r24, 3
 328:	13 c0       	rjmp	.+38     	; 0x350 <ReadRows+0x98>
 32a:	83 ec       	ldi	r24, 0xC3	; 195
 32c:	99 e0       	ldi	r25, 0x09	; 9
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <ReadRows+0x76>
 332:	00 c0       	rjmp	.+0      	; 0x334 <ReadRows+0x7c>
 334:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
 336:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 33a:	83 ff       	sbrs	r24, 3
 33c:	0c c0       	rjmp	.+24     	; 0x356 <ReadRows+0x9e>
			return 3;
		}
		else
		{
			return -1;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f ef       	ldi	r25, 0xFF	; 255
 342:	08 95       	ret
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
			return 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
			return 2;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	08 95       	ret
		{
			return -1;
		}
	}
	else{
		return -1;
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
			return 3;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	else{
		return -1;
	}
}
 35a:	08 95       	ret

0000035c <MatrixScanning>:
#include "../LCD/lcd.h"
#include "Keypad.h"
#include "../Inits/Inits.h"


char MatrixScanning(){
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
	int column = 0;
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	d0 e0       	ldi	r29, 0x00	; 0
	int row = -1;
	
	while(row == -1){
		ColumnScan(column);
 364:	ce 01       	movw	r24, r28
 366:	8d df       	rcall	.-230    	; 0x282 <ColumnScan>
		row = ReadRows();
 368:	a7 df       	rcall	.-178    	; 0x2b8 <ReadRows>
 36a:	8f 3f       	cpi	r24, 0xFF	; 255
		
		if(row == -1){
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	92 07       	cpc	r25, r18
 370:	39 f4       	brne	.+14     	; 0x380 <MatrixScanning+0x24>
 372:	21 96       	adiw	r28, 0x01	; 1
			column++;
 374:	c4 30       	cpi	r28, 0x04	; 4
			if(column > 3){
 376:	d1 05       	cpc	r29, r1
 378:	ac f3       	brlt	.-22     	; 0x364 <MatrixScanning+0x8>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
				column = 0;
 37c:	d0 e0       	ldi	r29, 0x00	; 0
 37e:	f2 cf       	rjmp	.-28     	; 0x364 <MatrixScanning+0x8>
 380:	cc 0f       	add	r28, r28
	}
}

// finder den character som passer til row og column der er klikket på
char DecodeKeyboard(int column, int row){
	return matrix[column][row];
 382:	dd 1f       	adc	r29, r29
 384:	cc 0f       	add	r28, r28
 386:	dd 1f       	adc	r29, r29
 388:	c9 5f       	subi	r28, 0xF9	; 249
 38a:	dd 4f       	sbci	r29, 0xFD	; 253
 38c:	c8 0f       	add	r28, r24
 38e:	d9 1f       	adc	r29, r25
 390:	88 81       	ld	r24, Y
				column = 0;
			}
		}
	}
	return DecodeKeyboard(column, row);
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <toggle_e>:
 398:	e2 e0       	ldi	r30, 0x02	; 2

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 81       	ld	r24, Z
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	80 83       	st	Z, r24
 3a2:	00 00       	nop
 3a4:	80 81       	ld	r24, Z
 3a6:	8f 7d       	andi	r24, 0xDF	; 223
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <lcd_write>:
 3ac:	cf 93       	push	r28
 3ae:	c8 2f       	mov	r28, r24
 3b0:	66 23       	and	r22, r22
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <lcd_write+0x14>
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	80 81       	ld	r24, Z
 3ba:	80 61       	ori	r24, 0x10	; 16
 3bc:	80 83       	st	Z, r24
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <lcd_write+0x1e>
 3c0:	e2 e0       	ldi	r30, 0x02	; 2
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 81       	ld	r24, Z
 3c6:	8f 7e       	andi	r24, 0xEF	; 239
 3c8:	80 83       	st	Z, r24
 3ca:	e2 e0       	ldi	r30, 0x02	; 2
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	80 81       	ld	r24, Z
 3d0:	87 7f       	andi	r24, 0xF7	; 247
 3d2:	80 83       	st	Z, r24
 3d4:	a1 e0       	ldi	r26, 0x01	; 1
 3d6:	b1 e0       	ldi	r27, 0x01	; 1
 3d8:	8c 91       	ld	r24, X
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	8c 93       	st	X, r24
 3de:	24 9a       	sbi	0x04, 4	; 4
 3e0:	25 9a       	sbi	0x04, 5	; 4
 3e2:	26 9a       	sbi	0x04, 6	; 4
 3e4:	2e 98       	cbi	0x05, 6	; 5
 3e6:	2d 98       	cbi	0x05, 5	; 5
 3e8:	2c 98       	cbi	0x05, 4	; 5
 3ea:	80 81       	ld	r24, Z
 3ec:	8f 7b       	andi	r24, 0xBF	; 191
 3ee:	80 83       	st	Z, r24
 3f0:	cc 23       	and	r28, r28
 3f2:	0c f4       	brge	.+2      	; 0x3f6 <lcd_write+0x4a>
 3f4:	2e 9a       	sbi	0x05, 6	; 5
 3f6:	c6 fd       	sbrc	r28, 6
 3f8:	2d 9a       	sbi	0x05, 5	; 5
 3fa:	c5 fd       	sbrc	r28, 5
 3fc:	2c 9a       	sbi	0x05, 4	; 5
 3fe:	c4 ff       	sbrs	r28, 4
 400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	e2 e0       	ldi	r30, 0x02	; 2
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	80 81       	ld	r24, Z
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	80 83       	st	Z, r24
 40c:	c5 df       	rcall	.-118    	; 0x398 <toggle_e>
 40e:	2e 98       	cbi	0x05, 6	; 5
 410:	2d 98       	cbi	0x05, 5	; 5
 412:	2c 98       	cbi	0x05, 4	; 5
 414:	e2 e0       	ldi	r30, 0x02	; 2
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	80 81       	ld	r24, Z
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	80 83       	st	Z, r24
 41e:	c3 fd       	sbrc	r28, 3
 420:	2e 9a       	sbi	0x05, 6	; 5
 422:	c2 fd       	sbrc	r28, 2
 424:	2d 9a       	sbi	0x05, 5	; 5
 426:	c1 fd       	sbrc	r28, 1
 428:	2c 9a       	sbi	0x05, 4	; 5
 42a:	c0 ff       	sbrs	r28, 0
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42e:	e2 e0       	ldi	r30, 0x02	; 2
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	80 81       	ld	r24, Z
 434:	80 64       	ori	r24, 0x40	; 64
 436:	80 83       	st	Z, r24
 438:	af df       	rcall	.-162    	; 0x398 <toggle_e>
 43a:	e2 e0       	ldi	r30, 0x02	; 2
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 83       	st	Z, r24
 444:	2c 9a       	sbi	0x05, 4	; 5
 446:	2d 9a       	sbi	0x05, 5	; 5
 448:	2e 9a       	sbi	0x05, 6	; 5
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <lcd_read>:
 44e:	88 23       	and	r24, r24
 450:	31 f0       	breq	.+12     	; 0x45e <lcd_read+0x10>
 452:	e2 e0       	ldi	r30, 0x02	; 2
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	80 81       	ld	r24, Z
 458:	80 61       	ori	r24, 0x10	; 16
 45a:	80 83       	st	Z, r24
 45c:	05 c0       	rjmp	.+10     	; 0x468 <lcd_read+0x1a>
 45e:	e2 e0       	ldi	r30, 0x02	; 2
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	80 81       	ld	r24, Z
 464:	8f 7e       	andi	r24, 0xEF	; 239
 466:	80 83       	st	Z, r24
 468:	e2 e0       	ldi	r30, 0x02	; 2
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	80 81       	ld	r24, Z
 46e:	88 60       	ori	r24, 0x08	; 8
 470:	80 83       	st	Z, r24
 472:	a1 e0       	ldi	r26, 0x01	; 1
 474:	b1 e0       	ldi	r27, 0x01	; 1
 476:	8c 91       	ld	r24, X
 478:	8f 7b       	andi	r24, 0xBF	; 191
 47a:	8c 93       	st	X, r24
 47c:	24 98       	cbi	0x04, 4	; 4
 47e:	25 98       	cbi	0x04, 5	; 4
 480:	26 98       	cbi	0x04, 6	; 4
 482:	80 81       	ld	r24, Z
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 83       	st	Z, r24
 488:	00 00       	nop
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 48e:	86 ff       	sbrs	r24, 6
 490:	02 c0       	rjmp	.+4      	; 0x496 <lcd_read+0x48>
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	01 c0       	rjmp	.+2      	; 0x498 <lcd_read+0x4a>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	1c 99       	sbic	0x03, 4	; 3
 49a:	80 62       	ori	r24, 0x20	; 32
 49c:	1d 99       	sbic	0x03, 5	; 3
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	1e 99       	sbic	0x03, 6	; 3
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	e2 e0       	ldi	r30, 0x02	; 2
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	90 81       	ld	r25, Z
 4aa:	9f 7d       	andi	r25, 0xDF	; 223
 4ac:	90 83       	st	Z, r25
 4ae:	00 00       	nop
 4b0:	90 81       	ld	r25, Z
 4b2:	90 62       	ori	r25, 0x20	; 32
 4b4:	90 83       	st	Z, r25
 4b6:	00 00       	nop
 4b8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 4bc:	96 fd       	sbrc	r25, 6
 4be:	81 60       	ori	r24, 0x01	; 1
 4c0:	1c 99       	sbic	0x03, 4	; 3
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	1d 99       	sbic	0x03, 5	; 3
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	1e 99       	sbic	0x03, 6	; 3
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	e2 e0       	ldi	r30, 0x02	; 2
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	90 81       	ld	r25, Z
 4d2:	9f 7d       	andi	r25, 0xDF	; 223
 4d4:	90 83       	st	Z, r25
 4d6:	08 95       	ret

000004d8 <lcd_waitbusy>:
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	b9 df       	rcall	.-142    	; 0x44e <lcd_read>
 4dc:	88 23       	and	r24, r24
 4de:	e4 f3       	brlt	.-8      	; 0x4d8 <lcd_waitbusy>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <lcd_waitbusy+0xa>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <lcd_waitbusy+0xc>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	b3 cf       	rjmp	.-154    	; 0x44e <lcd_read>
 4e8:	08 95       	ret

000004ea <lcd_command>:
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
 4ee:	f4 df       	rcall	.-24     	; 0x4d8 <lcd_waitbusy>
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	8c 2f       	mov	r24, r28
 4f4:	5b df       	rcall	.-330    	; 0x3ac <lcd_write>
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <lcd_gotoxy>:
 4fa:	61 11       	cpse	r22, r1
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <lcd_gotoxy+0xa>
 4fe:	80 58       	subi	r24, 0x80	; 128
 500:	f4 cf       	rjmp	.-24     	; 0x4ea <lcd_command>
 502:	08 95       	ret
 504:	80 54       	subi	r24, 0x40	; 64
 506:	f1 cf       	rjmp	.-30     	; 0x4ea <lcd_command>
 508:	08 95       	ret

0000050a <lcd_clrscr>:
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	ee cf       	rjmp	.-36     	; 0x4ea <lcd_command>
 50e:	08 95       	ret

00000510 <lcd_putc>:
 510:	cf 93       	push	r28
 512:	c8 2f       	mov	r28, r24
 514:	e1 df       	rcall	.-62     	; 0x4d8 <lcd_waitbusy>
 516:	ca 30       	cpi	r28, 0x0A	; 10
 518:	41 f4       	brne	.+16     	; 0x52a <lcd_putc+0x1a>
 51a:	80 34       	cpi	r24, 0x40	; 64
 51c:	10 f0       	brcs	.+4      	; 0x522 <lcd_putc+0x12>
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	01 c0       	rjmp	.+2      	; 0x524 <lcd_putc+0x14>
 522:	80 e4       	ldi	r24, 0x40	; 64
 524:	80 58       	subi	r24, 0x80	; 128
 526:	e1 df       	rcall	.-62     	; 0x4ea <lcd_command>
 528:	03 c0       	rjmp	.+6      	; 0x530 <lcd_putc+0x20>
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	8c 2f       	mov	r24, r28
 52e:	3e df       	rcall	.-388    	; 0x3ac <lcd_write>
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <lcd_puts>:
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
 53a:	21 96       	adiw	r28, 0x01	; 1
 53c:	fc 01       	movw	r30, r24
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	21 f0       	breq	.+8      	; 0x54c <lcd_puts+0x18>
 544:	e5 df       	rcall	.-54     	; 0x510 <lcd_putc>
 546:	89 91       	ld	r24, Y+
 548:	81 11       	cpse	r24, r1
 54a:	fc cf       	rjmp	.-8      	; 0x544 <lcd_puts+0x10>
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 55a:	e1 e0       	ldi	r30, 0x01	; 1
 55c:	f1 e0       	ldi	r31, 0x01	; 1
 55e:	80 81       	ld	r24, Z
 560:	80 61       	ori	r24, 0x10	; 16
 562:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 564:	80 81       	ld	r24, Z
 566:	88 60       	ori	r24, 0x08	; 8
 568:	80 83       	st	Z, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 56a:	80 81       	ld	r24, Z
 56c:	80 62       	ori	r24, 0x20	; 32
 56e:	80 83       	st	Z, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 570:	80 81       	ld	r24, Z
 572:	80 64       	ori	r24, 0x40	; 64
 574:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 576:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 578:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 57a:	26 9a       	sbi	0x04, 6	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57c:	8f e9       	ldi	r24, 0x9F	; 159
 57e:	9f e0       	ldi	r25, 0x0F	; 15
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x2e>
 584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_init+0x34>
 586:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 588:	2c 9a       	sbi	0x05, 4	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 58a:	c2 e0       	ldi	r28, 0x02	; 2
 58c:	d1 e0       	ldi	r29, 0x01	; 1
 58e:	88 81       	ld	r24, Y
 590:	80 64       	ori	r24, 0x40	; 64
 592:	88 83       	st	Y, r24
    lcd_e_toggle();
 594:	01 df       	rcall	.-510    	; 0x398 <toggle_e>
 596:	81 ee       	ldi	r24, 0xE1	; 225
 598:	94 e0       	ldi	r25, 0x04	; 4
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_init+0x48>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_init+0x4e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 5a0:	00 00       	nop
 5a2:	fa de       	rcall	.-524    	; 0x398 <toggle_e>
 5a4:	95 e1       	ldi	r25, 0x15	; 21
 5a6:	9a 95       	dec	r25
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <lcd_init+0x54>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 5aa:	00 00       	nop
 5ac:	f5 de       	rcall	.-534    	; 0x398 <toggle_e>
 5ae:	85 e1       	ldi	r24, 0x15	; 21
 5b0:	8a 95       	dec	r24
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <lcd_init+0x5e>
 5b4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 5b6:	88 81       	ld	r24, Y
 5b8:	8f 7b       	andi	r24, 0xBF	; 191
    lcd_e_toggle();
 5ba:	88 83       	st	Y, r24
 5bc:	ed de       	rcall	.-550    	; 0x398 <toggle_e>
 5be:	95 e1       	ldi	r25, 0x15	; 21
 5c0:	9a 95       	dec	r25
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_init+0x6e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 5c4:	00 00       	nop
 5c6:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 5c8:	90 df       	rcall	.-224    	; 0x4ea <lcd_command>
 5ca:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 5cc:	8e df       	rcall	.-228    	; 0x4ea <lcd_command>
 5ce:	9d df       	rcall	.-198    	; 0x50a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 5d0:	86 e0       	ldi	r24, 0x06	; 6
 5d2:	8b df       	rcall	.-234    	; 0x4ea <lcd_command>
 5d4:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 5d6:	89 df       	rcall	.-238    	; 0x4ea <lcd_command>
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28

}/* lcd_init */
 5dc:	1f 91       	pop	r17
 5de:	08 95       	ret

000005e0 <DisplayInput>:
 *  Author: kevi2042
 */ 


// viser input
void DisplayInput(char input[]){
 5e0:	cf 92       	push	r12
 5e2:	df 92       	push	r13
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DisplayInput+0x12>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DisplayInput+0x14>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	7c 01       	movw	r14, r24
	//for at udskrive en string skal der være \0 i slutningen
	char output[6];
	char krypt = "*";
	for (int i = 0; i < strlen(input); i++)
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	10 e0       	ldi	r17, 0x00	; 0
	{
		strcat(output,krypt);
 5fe:	87 e1       	ldi	r24, 0x17	; 23
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	6c 01       	movw	r12, r24
 604:	dd 24       	eor	r13, r13
// viser input
void DisplayInput(char input[]){
	//for at udskrive en string skal der være \0 i slutningen
	char output[6];
	char krypt = "*";
	for (int i = 0; i < strlen(input); i++)
 606:	06 c0       	rjmp	.+12     	; 0x614 <DisplayInput+0x34>
	{
		strcat(output,krypt);
 608:	b6 01       	movw	r22, r12
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	39 d0       	rcall	.+114    	; 0x682 <strcat>
// viser input
void DisplayInput(char input[]){
	//for at udskrive en string skal der være \0 i slutningen
	char output[6];
	char krypt = "*";
	for (int i = 0; i < strlen(input); i++)
 610:	0f 5f       	subi	r16, 0xFF	; 255
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	f7 01       	movw	r30, r14
 616:	01 90       	ld	r0, Z+
 618:	00 20       	and	r0, r0
 61a:	e9 f7       	brne	.-6      	; 0x616 <DisplayInput+0x36>
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	ee 19       	sub	r30, r14
 620:	ff 09       	sbc	r31, r15
 622:	0e 17       	cp	r16, r30
 624:	1f 07       	cpc	r17, r31
 626:	80 f3       	brcs	.-32     	; 0x608 <DisplayInput+0x28>
	{
		strcat(output,krypt);
	}
	lcd_puts(output);
 628:	ce 01       	movw	r24, r28
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	83 df       	rcall	.-250    	; 0x534 <lcd_puts>
// 			lcd_puts("****");
// 			break;
// 		default:
// 			break;
// 	}
}
 62e:	26 96       	adiw	r28, 0x06	; 6
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	08 95       	ret

0000064c <DisplayClear>:

void DisplayClear(){
	lcd_clrscr();
 64c:	5e cf       	rjmp	.-324    	; 0x50a <lcd_clrscr>
 64e:	08 95       	ret

00000650 <DisplayLockCheck>:
}

void DisplayLockCheck(){
	lcd_puts("Checking Lock");
 650:	89 e1       	ldi	r24, 0x19	; 25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	6f cf       	rjmp	.-290    	; 0x534 <lcd_puts>
 656:	08 95       	ret

00000658 <DisplayDoorLocked>:
}

void DisplayDoorLocked(){
	lcd_puts("Locked");
 658:	87 e2       	ldi	r24, 0x27	; 39
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	6b cf       	rjmp	.-298    	; 0x534 <lcd_puts>
 65e:	08 95       	ret

00000660 <DisplayInputPin>:
}

void DisplayInputPin(){
	lcd_puts("Input pin");
 660:	8e e2       	ldi	r24, 0x2E	; 46
 662:	92 e0       	ldi	r25, 0x02	; 2
 664:	67 df       	rcall	.-306    	; 0x534 <lcd_puts>
	lcd_gotoxy(0,1);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	45 cf       	rjmp	.-374    	; 0x4fa <lcd_gotoxy>
 670:	08 95       	ret

00000672 <DisplayLockOpen>:
}

void DisplayLockOpen(){
	lcd_puts("Unlocked");
 672:	88 e3       	ldi	r24, 0x38	; 56
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	5e cf       	rjmp	.-324    	; 0x534 <lcd_puts>
 678:	08 95       	ret

0000067a <main>:
{
	char buffer[7];


	
	Port_Init();
 67a:	ff dd       	rcall	.-1026   	; 0x27a <Port_Init>
    /* Replace with your application code */
    while (1) 
    {
		Display_Init();
 67c:	fa dd       	rcall	.-1036   	; 0x272 <Display_Init>
		OpenLock();
 67e:	88 dd       	rcall	.-1264   	; 0x190 <OpenLock>
 680:	fd cf       	rjmp	.-6      	; 0x67c <main+0x2>

00000682 <strcat>:
 682:	fb 01       	movw	r30, r22
 684:	dc 01       	movw	r26, r24
 686:	0d 90       	ld	r0, X+
 688:	00 20       	and	r0, r0
 68a:	e9 f7       	brne	.-6      	; 0x686 <strcat+0x4>
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	01 90       	ld	r0, Z+
 690:	0d 92       	st	X+, r0
 692:	00 20       	and	r0, r0
 694:	e1 f7       	brne	.-8      	; 0x68e <strcat+0xc>
 696:	08 95       	ret

00000698 <strcmp>:
 698:	fb 01       	movw	r30, r22
 69a:	dc 01       	movw	r26, r24
 69c:	8d 91       	ld	r24, X+
 69e:	01 90       	ld	r0, Z+
 6a0:	80 19       	sub	r24, r0
 6a2:	01 10       	cpse	r0, r1
 6a4:	d9 f3       	breq	.-10     	; 0x69c <strcmp+0x4>
 6a6:	99 0b       	sbc	r25, r25
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
