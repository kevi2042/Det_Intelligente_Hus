
Kevin Wolff Det Intelligente Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002c0  008002c0  00000a92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be8  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000170c  00000000  00000000  0000395c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156c  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000065d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098b  00000000  00000000  00006aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f15  00000000  00000000  0000742f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3c       	cpi	r26, 0xC0	; 192
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ec       	ldi	r26, 0xC0	; 192
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 3c       	cpi	r26, 0xC6	; 198
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8f d3       	rcall	.+1822   	; 0x83e <main>
 120:	0c c4       	rjmp	.+2072   	; 0x93a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PinCheck>:
		ResetInput();
}

int PinCheck(char input[], char hiddenPin[]){
	// ved strcmp returnere den 0 hvis begge strings er ens.
	int cmpvalue = strcmp(input, hiddenPin);
 124:	01 d4       	rcall	.+2050   	; 0x928 <strcmp>
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	89 2b       	or	r24, r25
 12c:	11 f0       	breq	.+4      	; 0x132 <PinCheck+0xe>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	}
	else{
		return 0;
	}
}
 132:	c9 01       	movw	r24, r18
 134:	08 95       	ret

00000136 <AddCharacter>:

void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
	{
		if(input[i] == '*'){
 136:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 13a:	9a 32       	cpi	r25, 0x2A	; 42
 13c:	a9 f0       	breq	.+42     	; 0x168 <AddCharacter+0x32>
 13e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 142:	9a 32       	cpi	r25, 0x2A	; 42
 144:	59 f0       	breq	.+22     	; 0x15c <AddCharacter+0x26>
 146:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 14a:	9a 32       	cpi	r25, 0x2A	; 42
 14c:	51 f0       	breq	.+20     	; 0x162 <AddCharacter+0x2c>
 14e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 152:	9a 32       	cpi	r25, 0x2A	; 42
 154:	71 f4       	brne	.+28     	; 0x172 <AddCharacter+0x3c>
	}
}

void AddCharacter(char charakter){
	//for at bruge string metoder kræver det at stringet indeholder "\0" i slutningen
	for (int i = 0; i < PINLENGTH;i++)
 156:	e3 e0       	ldi	r30, 0x03	; 3
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	08 c0       	rjmp	.+16     	; 0x16c <AddCharacter+0x36>
 15c:	e1 e0       	ldi	r30, 0x01	; 1
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	05 c0       	rjmp	.+10     	; 0x16c <AddCharacter+0x36>
 162:	e2 e0       	ldi	r30, 0x02	; 2
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <AddCharacter+0x36>
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if(input[i] == '*'){
			input[i] = charakter;
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <TestInput>:
			break;
		}
	}
}

int TestInput(){
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 17c:	2a 32       	cpi	r18, 0x2A	; 42
 17e:	11 f4       	brne	.+4      	; 0x184 <TestInput+0x10>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	else{
		return 1;
	}
}
 184:	08 95       	ret

00000186 <ResetInput>:

void ResetInput(){
	for (int i = 0; i < PINLENGTH;i++)
	{
		input[i] = '*';
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	8a e2       	ldi	r24, 0x2A	; 42
 18c:	80 83       	st	Z, r24
 18e:	81 83       	std	Z+1, r24	; 0x01
 190:	82 83       	std	Z+2, r24	; 0x02
 192:	83 83       	std	Z+3, r24	; 0x03
 194:	08 95       	ret

00000196 <InputError>:
	lock = 1;
}

void InputError(){
		//RGB LED lyser rød
		Toggle_Red();
 196:	b4 d3       	rcall	.+1896   	; 0x900 <Toggle_Red>
		wrongPinCount++;
 198:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <wrongPinCount>
 19c:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <wrongPinCount+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <wrongPinCount+0x1>
 1a6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <wrongPinCount>
		DisplayError(wrongPinCount);
		ResetInput();
 1aa:	f4 d2       	rcall	.+1512   	; 0x794 <DisplayError>
 1ac:	ec cf       	rjmp	.-40     	; 0x186 <ResetInput>
 1ae:	08 95       	ret

000001b0 <OpenLock>:
	else{
		LockOut();
	}
}

void OpenLock(){
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <OpenLock+0xa>
 1ba:	1f 92       	push	r1
 1bc:	1f 92       	push	r1
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	char hiddenPin[] = "1234";
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	e9 e0       	ldi	r30, 0x09	; 9
 1c6:	f2 e0       	ldi	r31, 0x02	; 2
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	8a 95       	dec	r24
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <OpenLock+0x1c>
	
	
	// display locked
	DisplayDoorLocked();
 1d4:	a6 d2       	rcall	.+1356   	; 0x722 <DisplayDoorLocked>
		// RGB LED Lyser blå
		Toggle_Blue();
		
		//if til hvis brugeren har indtastet den forkerte pin 3 gange
		if(wrongPinCount == 3){
			lock = -1;
 1d6:	0f ef       	ldi	r16, 0xFF	; 255
 1d8:	1f ef       	ldi	r17, 0xFF	; 255
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
	{
		// RGB LED Lyser blå
		Toggle_Blue();
 1da:	26 c0       	rjmp	.+76     	; 0x228 <OpenLock+0x78>
 1dc:	94 d3       	rcall	.+1832   	; 0x906 <Toggle_Blue>
		
		//if til hvis brugeren har indtastet den forkerte pin 3 gange
		if(wrongPinCount == 3){
 1de:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <wrongPinCount>
 1e2:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <wrongPinCount+0x1>
 1e6:	03 97       	sbiw	r24, 0x03	; 3
 1e8:	99 f4       	brne	.+38     	; 0x210 <OpenLock+0x60>
			lock = -1;
 1ea:	10 93 c1 02 	sts	0x02C1, r17	; 0x8002c1 <__data_end+0x1>
 1ee:	00 93 c0 02 	sts	0x02C0, r16	; 0x8002c0 <__data_end>
 1f2:	1a c0       	rjmp	.+52     	; 0x228 <OpenLock+0x78>
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
			{
				DisplayInput(input);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
				char result = MatrixScanning();
 1f8:	31 d2       	rcall	.+1122   	; 0x65c <DisplayInput>
 1fa:	ee d0       	rcall	.+476    	; 0x3d8 <MatrixScanning>
				AddCharacter(result);
 1fc:	9c df       	rcall	.-200    	; 0x136 <AddCharacter>
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	83 ec       	ldi	r24, 0xC3	; 195
 202:	99 e0       	ldi	r25, 0x09	; 9
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <OpenLock+0x54>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <OpenLock+0x5e>
 20e:	00 00       	nop
		if(wrongPinCount == 3){
			lock = -1;
		}
		else{
			//While til scanning af matrix. kører indtil alt på inputtet indeholder andet end *
			while (TestInput() == 0)
 210:	b1 df       	rcall	.-158    	; 0x174 <TestInput>
 212:	89 2b       	or	r24, r25
 214:	79 f3       	breq	.-34     	; 0x1f4 <OpenLock+0x44>
				char result = MatrixScanning();
				AddCharacter(result);
				_delay_ms(200);
			}
			//If til check om input er forkert
			if(PinCheck(input, hiddenPin) == 0){
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	81 df       	rcall	.-254    	; 0x124 <PinCheck>
 222:	89 2b       	or	r24, r25
 224:	09 f4       	brne	.+2      	; 0x228 <OpenLock+0x78>
				InputError();
 226:	b7 df       	rcall	.-146    	; 0x196 <InputError>
 228:	be 01       	movw	r22, r28
	
	// display locked
	DisplayDoorLocked();
	
	//Kører while så længe at input og hiddenpin ikke er ens
	while (PinCheck(input, hiddenPin) == 0)
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	78 df       	rcall	.-272    	; 0x124 <PinCheck>
 234:	89 2b       	or	r24, r25
				InputError();
			}
		}
	}
	
	DisplayLockOpen();
 236:	91 f2       	breq	.-92     	; 0x1dc <OpenLock+0x2c>
 238:	91 d2       	rcall	.+1314   	; 0x75c <DisplayLockOpen>
	Toggle_Green();
 23a:	68 d3       	rcall	.+1744   	; 0x90c <Toggle_Green>
 23c:	dd d2       	rcall	.+1466   	; 0x7f8 <DisplayMyHomeGreeting>
	DisplayMyHomeGreeting();
 23e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <wrongPinCount+0x1>
	//programmet kommer kun ud af while lykken hvis døren er låst op. (Lockcheck returnerer kun 0 eller 1)
	wrongPinCount = 0;
 242:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <wrongPinCount>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
	lock = 1;
 24a:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__data_end+0x1>
 24e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end>
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
}
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <LockOpened>:
 266:	52 d3       	rcall	.+1700   	; 0x90c <Toggle_Green>
 268:	3c c3       	rjmp	.+1656   	; 0x8e2 <HouseMenu>
	}
}

void LockOpened(){
	Toggle_Green();
	HouseMenu();
 26a:	08 95       	ret

0000026c <LockOut>:
 26c:	b8 d2       	rcall	.+1392   	; 0x7de <DisplayLockout>
}

void LockOut(){
	DisplayLockout();
	Toggle_Red();
 26e:	48 d3       	rcall	.+1680   	; 0x900 <Toggle_Red>
 270:	ff cf       	rjmp	.-2      	; 0x270 <LockOut+0x4>

00000272 <Doorlock>:
 272:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
static char input[6] = "****";
static int wrongPinCount = 0;
int lock = 0;

void Doorlock(){
	if(lock == 0){
 276:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <__data_end+0x1>
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	11 f4       	brne	.+4      	; 0x282 <Doorlock+0x10>
		OpenLock();
 27e:	98 cf       	rjmp	.-208    	; 0x1b0 <OpenLock>
 280:	08 95       	ret
	}
	else if(lock == 1){
 282:	01 97       	sbiw	r24, 0x01	; 1
		LockOpened();
 284:	11 f4       	brne	.+4      	; 0x28a <Doorlock+0x18>
 286:	ef cf       	rjmp	.-34     	; 0x266 <LockOpened>
	}
	else{
		LockOut();
 288:	08 95       	ret
 28a:	f0 df       	rcall	.-32     	; 0x26c <LockOut>

0000028c <LockDoor>:
		//Det er ikke meningen at brugeren kan komme ud af denne while lykke
	}
}

void LockDoor(){
	lock = 0;
 28c:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <__data_end+0x1>
 290:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
 294:	08 95       	ret

00000296 <CheckLock>:
}

void CheckLock(){
 296:	08 95       	ret

00000298 <Init_Keypad>:
void Init_RGBLED(){
	//sætter input port (pull up) på RGB LED
	RGB_DDR &= ~RGB_DDR_INPUTPORT;
}

void Init_LIGTH(){
 298:	e7 e0       	ldi	r30, 0x07	; 7
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	80 81       	ld	r24, Z
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	80 6f       	ori	r24, 0xF0	; 240
 2a6:	80 83       	st	Z, r24
 2a8:	e8 e0       	ldi	r30, 0x08	; 8
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	80 81       	ld	r24, Z
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	80 83       	st	Z, r24
 2b2:	08 95       	ret

000002b4 <Init_RGBLED>:
 2b4:	80 98       	cbi	0x10, 0	; 16
 2b6:	08 95       	ret

000002b8 <Init_Servo>:
	
}

void Init_Servo(){
	SERVO_DDR |= SERVO_PORT;
 2b8:	6b 9a       	sbi	0x0d, 3	; 13
 2ba:	08 95       	ret

000002bc <Init_Timer3Servo>:
}

void Init_Timer3Servo(){
		// Compare Output Mode: Fast PWM Mode: Clear OC0A on Compare Match, set OC0A at BOTTOM, non-inverting mode (Table 16-3)
		SERVO_TIMER3A |= SERVO_TIMER3_COM;					// datasheet 16.9.1
 2bc:	e0 e9       	ldi	r30, 0x90	; 144
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 6a       	ori	r24, 0xA8	; 168
 2c4:	80 83       	st	Z, r24
		
		//Waveform Generation Mode: Mode 5 Phase Correct PWM: WGM0 = 1, WGM2 = 1 (Table 16-8)
		SERVO_TIMER3A |= SERVO_TIMER3A_WGM;
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
		SERVO_TIMER3B |= SERVO_TIMER3B_WGM;
 2cc:	e1 e9       	ldi	r30, 0x91	; 145
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 61       	ori	r24, 0x10	; 16
 2d4:	80 83       	st	Z, r24
		
		// Clock Select Bit: clk/64 prescaling: CS = 011 : CS01 = 1, CS00 = 1 (Table 16-9), frekv. = 980Hz
		SERVO_TIMER3B |= SERVO_TIMER3_PRESCALER;		// datasheet 16.9.2
 2d6:	80 81       	ld	r24, Z
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	80 83       	st	Z, r24
		ICR3 = 20000;
 2dc:	80 e2       	ldi	r24, 0x20	; 32
 2de:	9e e4       	ldi	r25, 0x4E	; 78
 2e0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 2e4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 2e8:	08 95       	ret

000002ea <Display_Init>:
}

//initialiserer display
void Display_Init(){
	/* initialize display, cursor on */
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	70 d1       	rcall	.+736    	; 0x5ce <lcd_init>

	/* clear display and home cursor */
	lcd_clrscr();
 2ee:	4b c1       	rjmp	.+662    	; 0x586 <lcd_clrscr>
 2f0:	08 95       	ret

000002f2 <Port_Init>:
 2f2:	d2 df       	rcall	.-92     	; 0x298 <Init_Keypad>


//initialiser portne
void Port_Init(){
	Init_Keypad();
	Display_Init();
 2f4:	fa df       	rcall	.-12     	; 0x2ea <Display_Init>
	Init_RGBLED();
 2f6:	de df       	rcall	.-68     	; 0x2b4 <Init_RGBLED>
	Init_Timer3Servo();
 2f8:	e1 df       	rcall	.-62     	; 0x2bc <Init_Timer3Servo>
 2fa:	de cf       	rjmp	.-68     	; 0x2b8 <Init_Servo>
	Init_Servo();
 2fc:	08 95       	ret

000002fe <ColumnScan>:
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	21 f4       	brne	.+8      	; 0x30a <ColumnScan+0xc>
}

//scanner columns efter hvilken der er blevet klikket på
int ColumnScan(int column){
	if(column == 0){
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT0;
 302:	2f ee       	ldi	r18, 0xEF	; 239
 304:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 308:	08 95       	ret
	}
	else if(column == 1){
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <ColumnScan+0x1a>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT1;
 310:	2f ed       	ldi	r18, 0xDF	; 223
 312:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 316:	08 95       	ret
	}
	else if(column == 2){
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	91 05       	cpc	r25, r1
 31c:	21 f4       	brne	.+8      	; 0x326 <ColumnScan+0x28>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT2;
 31e:	2f eb       	ldi	r18, 0xBF	; 191
 320:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 324:	08 95       	ret
	}
	else if(column == 3){
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	91 05       	cpc	r25, r1
 32a:	19 f4       	brne	.+6      	; 0x332 <ColumnScan+0x34>
		MATRIX_PORT = ~MATRIX_PORT_OUTPUT3;
 32c:	2f e7       	ldi	r18, 0x7F	; 127
 32e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	}
	
	return column;
}
 332:	08 95       	ret

00000334 <ReadRows>:

// læser hvilken row der er klikket på
int ReadRows(){
 	if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 334:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 338:	20 fd       	sbrc	r18, 0
 33a:	0f c0       	rjmp	.+30     	; 0x35a <ReadRows+0x26>
 33c:	83 ec       	ldi	r24, 0xC3	; 195
 33e:	99 e0       	ldi	r25, 0x09	; 9
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <ReadRows+0xc>
 344:	00 c0       	rjmp	.+0      	; 0x346 <ReadRows+0x12>
 346:	00 00       	nop
		 _delay_ms(10);
		 if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT0)){
 348:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 34c:	82 2f       	mov	r24, r18
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	91 95       	neg	r25
 354:	81 95       	neg	r24
 356:	91 09       	sbc	r25, r1
 358:	08 95       	ret
		 }
		 else{
			 return -1;
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
 35a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 35e:	81 fd       	sbrc	r24, 1
 360:	0d c0       	rjmp	.+26     	; 0x37c <ReadRows+0x48>
 362:	83 ec       	ldi	r24, 0xC3	; 195
 364:	99 e0       	ldi	r25, 0x09	; 9
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <ReadRows+0x32>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <ReadRows+0x38>
 36c:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
 36e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 372:	81 ff       	sbrs	r24, 1
 374:	25 c0       	rjmp	.+74     	; 0x3c0 <ReadRows+0x8c>
			return 1;
		}
		else{
			return -1;
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	9f ef       	ldi	r25, 0xFF	; 255
 37a:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
 37c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 380:	82 fd       	sbrc	r24, 2
 382:	0d c0       	rjmp	.+26     	; 0x39e <ReadRows+0x6a>
 384:	83 ec       	ldi	r24, 0xC3	; 195
 386:	99 e0       	ldi	r25, 0x09	; 9
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <ReadRows+0x54>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <ReadRows+0x5a>
 38e:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
 390:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 394:	82 ff       	sbrs	r24, 2
 396:	17 c0       	rjmp	.+46     	; 0x3c6 <ReadRows+0x92>
			return 2;
		}
		else{
			return -1;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
 39e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3a2:	83 fd       	sbrc	r24, 3
 3a4:	13 c0       	rjmp	.+38     	; 0x3cc <ReadRows+0x98>
 3a6:	83 ec       	ldi	r24, 0xC3	; 195
 3a8:	99 e0       	ldi	r25, 0x09	; 9
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <ReadRows+0x76>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <ReadRows+0x7c>
 3b0:	00 00       	nop
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
 3b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 3b6:	83 ff       	sbrs	r24, 3
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <ReadRows+0x9e>
			return 3;
		}
		else
		{
			return -1;
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	08 95       	ret
		 }
	 }
 	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT1)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT1)){
			return 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT2)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT2)){
			return 2;
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	08 95       	ret
		{
			return -1;
		}
	}
	else{
		return -1;
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	08 95       	ret
		}
	}
	else if(~MATRIX_PORT_INPUT & (1 << MATRIX_PORT_INPUT3)){
		_delay_ms(10);
		if(~MATRIX_PORT_INPUT & (1<< MATRIX_PORT_INPUT3)){
			return 3;
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	else{
		return -1;
	}
}
 3d6:	08 95       	ret

000003d8 <MatrixScanning>:
#include "../LCD/lcd.h"
#include "Keypad.h"
#include "../Inits/Inits.h"


char MatrixScanning(){
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	int column = 0;
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d0 e0       	ldi	r29, 0x00	; 0
	int row = -1;
	
	while(row == -1){
		ColumnScan(column);
 3e0:	ce 01       	movw	r24, r28
 3e2:	8d df       	rcall	.-230    	; 0x2fe <ColumnScan>
		row = ReadRows();
 3e4:	a7 df       	rcall	.-178    	; 0x334 <ReadRows>
 3e6:	8f 3f       	cpi	r24, 0xFF	; 255
		
		if(row == -1){
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	92 07       	cpc	r25, r18
 3ec:	39 f4       	brne	.+14     	; 0x3fc <MatrixScanning+0x24>
 3ee:	21 96       	adiw	r28, 0x01	; 1
			column++;
 3f0:	c4 30       	cpi	r28, 0x04	; 4
			if(column > 3){
 3f2:	d1 05       	cpc	r29, r1
 3f4:	ac f3       	brlt	.-22     	; 0x3e0 <MatrixScanning+0x8>
 3f6:	c0 e0       	ldi	r28, 0x00	; 0
				column = 0;
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
 3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <MatrixScanning+0x8>
 3fc:	cc 0f       	add	r28, r28
	}
}

// finder den character som passer til row og column der er klikket på
char DecodeKeyboard(int column, int row){
	return matrix[column][row];
 3fe:	dd 1f       	adc	r29, r29
 400:	cc 0f       	add	r28, r28
 402:	dd 1f       	adc	r29, r29
 404:	c2 5f       	subi	r28, 0xF2	; 242
 406:	dd 4f       	sbci	r29, 0xFD	; 253
 408:	c8 0f       	add	r28, r24
 40a:	d9 1f       	adc	r29, r25
 40c:	88 81       	ld	r24, Y
				column = 0;
			}
		}
	}
	return DecodeKeyboard(column, row);
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <toggle_e>:
 414:	e2 e0       	ldi	r30, 0x02	; 2

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	80 81       	ld	r24, Z
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	80 83       	st	Z, r24
 41e:	00 00       	nop
 420:	80 81       	ld	r24, Z
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	80 83       	st	Z, r24
 426:	08 95       	ret

00000428 <lcd_write>:
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
 42c:	66 23       	and	r22, r22
 42e:	31 f0       	breq	.+12     	; 0x43c <lcd_write+0x14>
 430:	e2 e0       	ldi	r30, 0x02	; 2
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	80 81       	ld	r24, Z
 436:	80 61       	ori	r24, 0x10	; 16
 438:	80 83       	st	Z, r24
 43a:	05 c0       	rjmp	.+10     	; 0x446 <lcd_write+0x1e>
 43c:	e2 e0       	ldi	r30, 0x02	; 2
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	80 81       	ld	r24, Z
 442:	8f 7e       	andi	r24, 0xEF	; 239
 444:	80 83       	st	Z, r24
 446:	e2 e0       	ldi	r30, 0x02	; 2
 448:	f1 e0       	ldi	r31, 0x01	; 1
 44a:	80 81       	ld	r24, Z
 44c:	87 7f       	andi	r24, 0xF7	; 247
 44e:	80 83       	st	Z, r24
 450:	a1 e0       	ldi	r26, 0x01	; 1
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	8c 91       	ld	r24, X
 456:	80 64       	ori	r24, 0x40	; 64
 458:	8c 93       	st	X, r24
 45a:	24 9a       	sbi	0x04, 4	; 4
 45c:	25 9a       	sbi	0x04, 5	; 4
 45e:	26 9a       	sbi	0x04, 6	; 4
 460:	2e 98       	cbi	0x05, 6	; 5
 462:	2d 98       	cbi	0x05, 5	; 5
 464:	2c 98       	cbi	0x05, 4	; 5
 466:	80 81       	ld	r24, Z
 468:	8f 7b       	andi	r24, 0xBF	; 191
 46a:	80 83       	st	Z, r24
 46c:	cc 23       	and	r28, r28
 46e:	0c f4       	brge	.+2      	; 0x472 <lcd_write+0x4a>
 470:	2e 9a       	sbi	0x05, 6	; 5
 472:	c6 fd       	sbrc	r28, 6
 474:	2d 9a       	sbi	0x05, 5	; 5
 476:	c5 fd       	sbrc	r28, 5
 478:	2c 9a       	sbi	0x05, 4	; 5
 47a:	c4 ff       	sbrs	r28, 4
 47c:	05 c0       	rjmp	.+10     	; 0x488 <lcd_write+0x60>
 47e:	e2 e0       	ldi	r30, 0x02	; 2
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	80 81       	ld	r24, Z
 484:	80 64       	ori	r24, 0x40	; 64
 486:	80 83       	st	Z, r24
 488:	c5 df       	rcall	.-118    	; 0x414 <toggle_e>
 48a:	2e 98       	cbi	0x05, 6	; 5
 48c:	2d 98       	cbi	0x05, 5	; 5
 48e:	2c 98       	cbi	0x05, 4	; 5
 490:	e2 e0       	ldi	r30, 0x02	; 2
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	80 81       	ld	r24, Z
 496:	8f 7b       	andi	r24, 0xBF	; 191
 498:	80 83       	st	Z, r24
 49a:	c3 fd       	sbrc	r28, 3
 49c:	2e 9a       	sbi	0x05, 6	; 5
 49e:	c2 fd       	sbrc	r28, 2
 4a0:	2d 9a       	sbi	0x05, 5	; 5
 4a2:	c1 fd       	sbrc	r28, 1
 4a4:	2c 9a       	sbi	0x05, 4	; 5
 4a6:	c0 ff       	sbrs	r28, 0
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <lcd_write+0x8c>
 4aa:	e2 e0       	ldi	r30, 0x02	; 2
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	80 81       	ld	r24, Z
 4b0:	80 64       	ori	r24, 0x40	; 64
 4b2:	80 83       	st	Z, r24
 4b4:	af df       	rcall	.-162    	; 0x414 <toggle_e>
 4b6:	e2 e0       	ldi	r30, 0x02	; 2
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	80 81       	ld	r24, Z
 4bc:	80 64       	ori	r24, 0x40	; 64
 4be:	80 83       	st	Z, r24
 4c0:	2c 9a       	sbi	0x05, 4	; 5
 4c2:	2d 9a       	sbi	0x05, 5	; 5
 4c4:	2e 9a       	sbi	0x05, 6	; 5
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <lcd_read>:
 4ca:	88 23       	and	r24, r24
 4cc:	31 f0       	breq	.+12     	; 0x4da <lcd_read+0x10>
 4ce:	e2 e0       	ldi	r30, 0x02	; 2
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	80 81       	ld	r24, Z
 4d4:	80 61       	ori	r24, 0x10	; 16
 4d6:	80 83       	st	Z, r24
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <lcd_read+0x1a>
 4da:	e2 e0       	ldi	r30, 0x02	; 2
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	80 81       	ld	r24, Z
 4e0:	8f 7e       	andi	r24, 0xEF	; 239
 4e2:	80 83       	st	Z, r24
 4e4:	e2 e0       	ldi	r30, 0x02	; 2
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	80 81       	ld	r24, Z
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	80 83       	st	Z, r24
 4ee:	a1 e0       	ldi	r26, 0x01	; 1
 4f0:	b1 e0       	ldi	r27, 0x01	; 1
 4f2:	8c 91       	ld	r24, X
 4f4:	8f 7b       	andi	r24, 0xBF	; 191
 4f6:	8c 93       	st	X, r24
 4f8:	24 98       	cbi	0x04, 4	; 4
 4fa:	25 98       	cbi	0x04, 5	; 4
 4fc:	26 98       	cbi	0x04, 6	; 4
 4fe:	80 81       	ld	r24, Z
 500:	80 62       	ori	r24, 0x20	; 32
 502:	80 83       	st	Z, r24
 504:	00 00       	nop
 506:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 50a:	86 ff       	sbrs	r24, 6
 50c:	02 c0       	rjmp	.+4      	; 0x512 <lcd_read+0x48>
 50e:	80 e1       	ldi	r24, 0x10	; 16
 510:	01 c0       	rjmp	.+2      	; 0x514 <lcd_read+0x4a>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	1c 99       	sbic	0x03, 4	; 3
 516:	80 62       	ori	r24, 0x20	; 32
 518:	1d 99       	sbic	0x03, 5	; 3
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	1e 99       	sbic	0x03, 6	; 3
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	e2 e0       	ldi	r30, 0x02	; 2
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	90 81       	ld	r25, Z
 526:	9f 7d       	andi	r25, 0xDF	; 223
 528:	90 83       	st	Z, r25
 52a:	00 00       	nop
 52c:	90 81       	ld	r25, Z
 52e:	90 62       	ori	r25, 0x20	; 32
 530:	90 83       	st	Z, r25
 532:	00 00       	nop
 534:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 538:	96 fd       	sbrc	r25, 6
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	1c 99       	sbic	0x03, 4	; 3
 53e:	82 60       	ori	r24, 0x02	; 2
 540:	1d 99       	sbic	0x03, 5	; 3
 542:	84 60       	ori	r24, 0x04	; 4
 544:	1e 99       	sbic	0x03, 6	; 3
 546:	88 60       	ori	r24, 0x08	; 8
 548:	e2 e0       	ldi	r30, 0x02	; 2
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	90 81       	ld	r25, Z
 54e:	9f 7d       	andi	r25, 0xDF	; 223
 550:	90 83       	st	Z, r25
 552:	08 95       	ret

00000554 <lcd_waitbusy>:
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	b9 df       	rcall	.-142    	; 0x4ca <lcd_read>
 558:	88 23       	and	r24, r24
 55a:	e4 f3       	brlt	.-8      	; 0x554 <lcd_waitbusy>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <lcd_waitbusy+0xa>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <lcd_waitbusy+0xc>
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	b3 cf       	rjmp	.-154    	; 0x4ca <lcd_read>
 564:	08 95       	ret

00000566 <lcd_command>:
 566:	cf 93       	push	r28
 568:	c8 2f       	mov	r28, r24
 56a:	f4 df       	rcall	.-24     	; 0x554 <lcd_waitbusy>
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	8c 2f       	mov	r24, r28
 570:	5b df       	rcall	.-330    	; 0x428 <lcd_write>
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <lcd_gotoxy>:
 576:	61 11       	cpse	r22, r1
 578:	03 c0       	rjmp	.+6      	; 0x580 <lcd_gotoxy+0xa>
 57a:	80 58       	subi	r24, 0x80	; 128
 57c:	f4 cf       	rjmp	.-24     	; 0x566 <lcd_command>
 57e:	08 95       	ret
 580:	80 54       	subi	r24, 0x40	; 64
 582:	f1 cf       	rjmp	.-30     	; 0x566 <lcd_command>
 584:	08 95       	ret

00000586 <lcd_clrscr>:
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	ee cf       	rjmp	.-36     	; 0x566 <lcd_command>
 58a:	08 95       	ret

0000058c <lcd_putc>:
 58c:	cf 93       	push	r28
 58e:	c8 2f       	mov	r28, r24
 590:	e1 df       	rcall	.-62     	; 0x554 <lcd_waitbusy>
 592:	ca 30       	cpi	r28, 0x0A	; 10
 594:	41 f4       	brne	.+16     	; 0x5a6 <lcd_putc+0x1a>
 596:	80 34       	cpi	r24, 0x40	; 64
 598:	10 f0       	brcs	.+4      	; 0x59e <lcd_putc+0x12>
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <lcd_putc+0x14>
 59e:	80 e4       	ldi	r24, 0x40	; 64
 5a0:	80 58       	subi	r24, 0x80	; 128
 5a2:	e1 df       	rcall	.-62     	; 0x566 <lcd_command>
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <lcd_putc+0x20>
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	8c 2f       	mov	r24, r28
 5aa:	3e df       	rcall	.-388    	; 0x428 <lcd_write>
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <lcd_puts>:
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
 5b6:	21 96       	adiw	r28, 0x01	; 1
 5b8:	fc 01       	movw	r30, r24
 5ba:	80 81       	ld	r24, Z
 5bc:	88 23       	and	r24, r24
 5be:	21 f0       	breq	.+8      	; 0x5c8 <lcd_puts+0x18>
 5c0:	e5 df       	rcall	.-54     	; 0x58c <lcd_putc>
 5c2:	89 91       	ld	r24, Y+
 5c4:	81 11       	cpse	r24, r1
 5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <lcd_puts+0x10>
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 5d6:	e1 e0       	ldi	r30, 0x01	; 1
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	80 81       	ld	r24, Z
 5dc:	80 61       	ori	r24, 0x10	; 16
 5de:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 5e0:	80 81       	ld	r24, Z
 5e2:	88 60       	ori	r24, 0x08	; 8
 5e4:	80 83       	st	Z, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 5e6:	80 81       	ld	r24, Z
 5e8:	80 62       	ori	r24, 0x20	; 32
 5ea:	80 83       	st	Z, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 5ec:	80 81       	ld	r24, Z
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 5f2:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 5f4:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 5f6:	26 9a       	sbi	0x04, 6	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f8:	8f e9       	ldi	r24, 0x9F	; 159
 5fa:	9f e0       	ldi	r25, 0x0F	; 15
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <lcd_init+0x2e>
 600:	00 c0       	rjmp	.+0      	; 0x602 <lcd_init+0x34>
 602:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 604:	2c 9a       	sbi	0x05, 4	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 606:	c2 e0       	ldi	r28, 0x02	; 2
 608:	d1 e0       	ldi	r29, 0x01	; 1
 60a:	88 81       	ld	r24, Y
 60c:	80 64       	ori	r24, 0x40	; 64
 60e:	88 83       	st	Y, r24
    lcd_e_toggle();
 610:	01 df       	rcall	.-510    	; 0x414 <toggle_e>
 612:	81 ee       	ldi	r24, 0xE1	; 225
 614:	94 e0       	ldi	r25, 0x04	; 4
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_init+0x48>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <lcd_init+0x4e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 61c:	00 00       	nop
 61e:	fa de       	rcall	.-524    	; 0x414 <toggle_e>
 620:	95 e1       	ldi	r25, 0x15	; 21
 622:	9a 95       	dec	r25
 624:	f1 f7       	brne	.-4      	; 0x622 <lcd_init+0x54>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 626:	00 00       	nop
 628:	f5 de       	rcall	.-534    	; 0x414 <toggle_e>
 62a:	85 e1       	ldi	r24, 0x15	; 21
 62c:	8a 95       	dec	r24
 62e:	f1 f7       	brne	.-4      	; 0x62c <lcd_init+0x5e>
 630:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 632:	88 81       	ld	r24, Y
 634:	8f 7b       	andi	r24, 0xBF	; 191
    lcd_e_toggle();
 636:	88 83       	st	Y, r24
 638:	ed de       	rcall	.-550    	; 0x414 <toggle_e>
 63a:	95 e1       	ldi	r25, 0x15	; 21
 63c:	9a 95       	dec	r25
 63e:	f1 f7       	brne	.-4      	; 0x63c <lcd_init+0x6e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 640:	00 00       	nop
 642:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 644:	90 df       	rcall	.-224    	; 0x566 <lcd_command>
 646:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 648:	8e df       	rcall	.-228    	; 0x566 <lcd_command>
 64a:	9d df       	rcall	.-198    	; 0x586 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	8b df       	rcall	.-234    	; 0x566 <lcd_command>
 650:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 652:	89 df       	rcall	.-238    	; 0x566 <lcd_command>
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28

}/* lcd_init */
 658:	1f 91       	pop	r17
 65a:	08 95       	ret

0000065c <DisplayInput>:

#include "LCD_Display.h"
#include <util/delay.h>

// viser input
void DisplayInput(char input[]){
 65c:	cf 92       	push	r12
 65e:	df 92       	push	r13
 660:	ef 92       	push	r14
 662:	ff 92       	push	r15
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
 670:	29 97       	sbiw	r28, 0x09	; 9
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	f8 94       	cli
 676:	de bf       	out	0x3e, r29	; 62
 678:	0f be       	out	0x3f, r0	; 63
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	7c 01       	movw	r14, r24
	lcd_clrscr();
 67e:	83 df       	rcall	.-250    	; 0x586 <lcd_clrscr>
	lcd_gotoxy(0,0);
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	76 df       	rcall	.-276    	; 0x576 <lcd_gotoxy>
	lcd_puts("Input pin");
 68a:	8e e1       	ldi	r24, 0x1E	; 30
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	90 df       	rcall	.-224    	; 0x5b0 <lcd_puts>
	lcd_gotoxy(0,1);
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	6e df       	rcall	.-292    	; 0x576 <lcd_gotoxy>
	
	
	//for at udskrive en string skal der være \0 i slutningen
	char output[6] = "";
 69a:	1a 82       	std	Y+2, r1	; 0x02
 69c:	19 82       	std	Y+1, r1	; 0x01
 69e:	fe 01       	movw	r30, r28
 6a0:	33 96       	adiw	r30, 0x03	; 3
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	df 01       	movw	r26, r30
 6a6:	1d 92       	st	X+, r1
 6a8:	8a 95       	dec	r24
 6aa:	e9 f7       	brne	.-6      	; 0x6a6 <DisplayInput+0x4a>
	char krypt[] = "*\0";
 6ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
 6b0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
 6b4:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
 6b8:	8f 83       	std	Y+7, r24	; 0x07
 6ba:	98 87       	std	Y+8, r25	; 0x08
 6bc:	a9 87       	std	Y+9, r26	; 0x09
 6be:	67 01       	movw	r12, r14
	for (int i = 0; i < strlen(input); i++)
 6c0:	00 e0       	ldi	r16, 0x00	; 0
 6c2:	10 e0       	ldi	r17, 0x00	; 0
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <DisplayInput+0x84>
	{
		if(input[i] != '*'){
 6c6:	f6 01       	movw	r30, r12
 6c8:	81 91       	ld	r24, Z+
 6ca:	6f 01       	movw	r12, r30
 6cc:	8a 32       	cpi	r24, 0x2A	; 42
 6ce:	31 f0       	breq	.+12     	; 0x6dc <DisplayInput+0x80>
			strcat(output,krypt);
 6d0:	be 01       	movw	r22, r28
 6d2:	69 5f       	subi	r22, 0xF9	; 249
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	ce 01       	movw	r24, r28
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	1b d1       	rcall	.+566    	; 0x912 <strcat>
	
	
	//for at udskrive en string skal der være \0 i slutningen
	char output[6] = "";
	char krypt[] = "*\0";
	for (int i = 0; i < strlen(input); i++)
 6dc:	0f 5f       	subi	r16, 0xFF	; 255
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	f7 01       	movw	r30, r14
 6e2:	01 90       	ld	r0, Z+
 6e4:	00 20       	and	r0, r0
 6e6:	e9 f7       	brne	.-6      	; 0x6e2 <DisplayInput+0x86>
 6e8:	31 97       	sbiw	r30, 0x01	; 1
 6ea:	ee 19       	sub	r30, r14
 6ec:	ff 09       	sbc	r31, r15
 6ee:	0e 17       	cp	r16, r30
 6f0:	1f 07       	cpc	r17, r31
	{
		if(input[i] != '*'){
			strcat(output,krypt);
		}
	}
	lcd_puts(output);
 6f2:	48 f3       	brcs	.-46     	; 0x6c6 <DisplayInput+0x6a>
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	5b df       	rcall	.-330    	; 0x5b0 <lcd_puts>
}
 6fa:	29 96       	adiw	r28, 0x09	; 9
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	ff 90       	pop	r15
 710:	ef 90       	pop	r14
 712:	df 90       	pop	r13
 714:	cf 90       	pop	r12
 716:	08 95       	ret

00000718 <DisplayPinCheck>:

void DisplayPinCheck(){
	lcd_clrscr();
 718:	36 df       	rcall	.-404    	; 0x586 <lcd_clrscr>
	lcd_puts("Checking Lock");
 71a:	88 e2       	ldi	r24, 0x28	; 40
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	48 cf       	rjmp	.-368    	; 0x5b0 <lcd_puts>
 720:	08 95       	ret

00000722 <DisplayDoorLocked>:
}

void DisplayDoorLocked(){
	lcd_clrscr();
 722:	31 df       	rcall	.-414    	; 0x586 <lcd_clrscr>
	DisplayPinCheck();
 724:	f9 df       	rcall	.-14     	; 0x718 <DisplayPinCheck>
 726:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 728:	8d e3       	ldi	r24, 0x3D	; 61
 72a:	99 e4       	ldi	r25, 0x49	; 73
 72c:	21 50       	subi	r18, 0x01	; 1
 72e:	80 40       	sbci	r24, 0x00	; 0
 730:	90 40       	sbci	r25, 0x00	; 0
 732:	e1 f7       	brne	.-8      	; 0x72c <DisplayDoorLocked+0xa>
 734:	00 c0       	rjmp	.+0      	; 0x736 <DisplayDoorLocked+0x14>
 736:	00 00       	nop
 738:	61 e0       	ldi	r22, 0x01	; 1
	_delay_ms(DISPLAYDELAY);
	lcd_gotoxy(0,1);
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	1a df       	rcall	.-460    	; 0x576 <lcd_gotoxy>
 742:	86 e3       	ldi	r24, 0x36	; 54
	lcd_puts("Locked");
 744:	92 e0       	ldi	r25, 0x02	; 2
 746:	34 df       	rcall	.-408    	; 0x5b0 <lcd_puts>
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	8d e3       	ldi	r24, 0x3D	; 61
 74c:	99 e4       	ldi	r25, 0x49	; 73
 74e:	21 50       	subi	r18, 0x01	; 1
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	90 40       	sbci	r25, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <DisplayDoorLocked+0x2c>
 756:	00 c0       	rjmp	.+0      	; 0x758 <DisplayDoorLocked+0x36>
 758:	00 00       	nop
 75a:	08 95       	ret

0000075c <DisplayLockOpen>:
 75c:	dd df       	rcall	.-70     	; 0x718 <DisplayPinCheck>
 75e:	2f ef       	ldi	r18, 0xFF	; 255
 760:	8d e3       	ldi	r24, 0x3D	; 61
 762:	99 e4       	ldi	r25, 0x49	; 73
 764:	21 50       	subi	r18, 0x01	; 1
 766:	80 40       	sbci	r24, 0x00	; 0
 768:	90 40       	sbci	r25, 0x00	; 0
 76a:	e1 f7       	brne	.-8      	; 0x764 <DisplayLockOpen+0x8>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <DisplayLockOpen+0x12>
 76e:	00 00       	nop
}

void DisplayLockOpen(){
	DisplayPinCheck();
	_delay_ms(DISPLAYDELAY);
	lcd_gotoxy(0,1);
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	fe de       	rcall	.-516    	; 0x576 <lcd_gotoxy>
	lcd_puts("Unlocked");
 77a:	8d e3       	ldi	r24, 0x3D	; 61
 77c:	92 e0       	ldi	r25, 0x02	; 2
 77e:	18 df       	rcall	.-464    	; 0x5b0 <lcd_puts>
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	8d e3       	ldi	r24, 0x3D	; 61
 784:	99 e4       	ldi	r25, 0x49	; 73
 786:	21 50       	subi	r18, 0x01	; 1
 788:	80 40       	sbci	r24, 0x00	; 0
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <DisplayLockOpen+0x2a>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <DisplayLockOpen+0x34>
 790:	00 00       	nop
 792:	08 95       	ret

00000794 <DisplayError>:
	_delay_ms(DISPLAYDELAY);
}

void DisplayError(int pincount){
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	ec 01       	movw	r28, r24
	lcd_clrscr();
 79a:	f5 de       	rcall	.-534    	; 0x586 <lcd_clrscr>
	lcd_puts("Error: Wrong Pin");
 79c:	86 e4       	ldi	r24, 0x46	; 70
 79e:	92 e0       	ldi	r25, 0x02	; 2
 7a0:	07 df       	rcall	.-498    	; 0x5b0 <lcd_puts>
	lcd_gotoxy(0,1);
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	e5 de       	rcall	.-566    	; 0x576 <lcd_gotoxy>
	switch (pincount)
 7ac:	c1 30       	cpi	r28, 0x01	; 1
 7ae:	d1 05       	cpc	r29, r1
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <DisplayError+0x24>
 7b2:	22 97       	sbiw	r28, 0x02	; 2
 7b4:	29 f0       	breq	.+10     	; 0x7c0 <DisplayError+0x2c>
	{
		case 1:
			lcd_puts("Try again");
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <DisplayError+0x32>
 7b8:	87 e5       	ldi	r24, 0x57	; 87
 7ba:	92 e0       	ldi	r25, 0x02	; 2
			break;
 7bc:	f9 de       	rcall	.-526    	; 0x5b0 <lcd_puts>
		case 2:
			lcd_puts("Last chance");
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <DisplayError+0x32>
 7c0:	81 e6       	ldi	r24, 0x61	; 97
 7c2:	92 e0       	ldi	r25, 0x02	; 2
 7c4:	f5 de       	rcall	.-534    	; 0x5b0 <lcd_puts>
 7c6:	2f ef       	ldi	r18, 0xFF	; 255
 7c8:	8d e3       	ldi	r24, 0x3D	; 61
 7ca:	99 e4       	ldi	r25, 0x49	; 73
 7cc:	21 50       	subi	r18, 0x01	; 1
 7ce:	80 40       	sbci	r24, 0x00	; 0
 7d0:	90 40       	sbci	r25, 0x00	; 0
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <DisplayError+0x38>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <DisplayError+0x42>
 7d6:	00 00       	nop
			break;
		default:
		break;
	}
	_delay_ms(DISPLAYDELAY);
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <DisplayLockout>:

void DisplayLockout(){
	lcd_clrscr();
 7de:	d3 de       	rcall	.-602    	; 0x586 <lcd_clrscr>
	lcd_puts("Too Many Errors");
 7e0:	8d e6       	ldi	r24, 0x6D	; 109
 7e2:	92 e0       	ldi	r25, 0x02	; 2
 7e4:	e5 de       	rcall	.-566    	; 0x5b0 <lcd_puts>
	lcd_gotoxy(0,1);
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	c3 de       	rcall	.-634    	; 0x576 <lcd_gotoxy>
	lcd_puts("Locked out :D");
 7f0:	8d e7       	ldi	r24, 0x7D	; 125
 7f2:	92 e0       	ldi	r25, 0x02	; 2
 7f4:	dd ce       	rjmp	.-582    	; 0x5b0 <lcd_puts>
 7f6:	08 95       	ret

000007f8 <DisplayMyHomeGreeting>:
 7f8:	c6 de       	rcall	.-628    	; 0x586 <lcd_clrscr>
}

void DisplayMyHomeGreeting(){
	lcd_clrscr();
	lcd_puts("Welcome to");
 7fa:	8b e8       	ldi	r24, 0x8B	; 139
 7fc:	92 e0       	ldi	r25, 0x02	; 2
 7fe:	d8 de       	rcall	.-592    	; 0x5b0 <lcd_puts>
	lcd_gotoxy(0,1);
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	b6 de       	rcall	.-660    	; 0x576 <lcd_gotoxy>
	lcd_puts("My Home");
 80a:	86 e9       	ldi	r24, 0x96	; 150
 80c:	92 e0       	ldi	r25, 0x02	; 2
 80e:	d0 de       	rcall	.-608    	; 0x5b0 <lcd_puts>
 810:	2f ef       	ldi	r18, 0xFF	; 255
 812:	8d e3       	ldi	r24, 0x3D	; 61
 814:	99 e4       	ldi	r25, 0x49	; 73
 816:	21 50       	subi	r18, 0x01	; 1
 818:	80 40       	sbci	r24, 0x00	; 0
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <DisplayMyHomeGreeting+0x1e>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <DisplayMyHomeGreeting+0x28>
 820:	00 00       	nop
 822:	08 95       	ret

00000824 <DisplayChoices>:
 824:	b0 de       	rcall	.-672    	; 0x586 <lcd_clrscr>
	_delay_ms(DISPLAYDELAY);	
}

void DisplayChoices(){
	lcd_clrscr();
	lcd_puts("A: Light - B:Garage");
 826:	8e e9       	ldi	r24, 0x9E	; 158
 828:	92 e0       	ldi	r25, 0x02	; 2
 82a:	c2 de       	rcall	.-636    	; 0x5b0 <lcd_puts>
	lcd_gotoxy(0,1);
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	a0 de       	rcall	.-704    	; 0x576 <lcd_gotoxy>
	lcd_puts("C: Lock Door");
 836:	82 eb       	ldi	r24, 0xB2	; 178
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	ba ce       	rjmp	.-652    	; 0x5b0 <lcd_puts>
 83c:	08 95       	ret

0000083e <main>:
{
	char buffer[7];


	
	Port_Init();
 83e:	59 dd       	rcall	.-1358   	; 0x2f2 <Port_Init>
    /* Replace with your application code */
    while (1) 
    {
		Display_Init();
 840:	54 dd       	rcall	.-1368   	; 0x2ea <Display_Init>
		
		Doorlock();
 842:	17 dd       	rcall	.-1490   	; 0x272 <Doorlock>
 844:	fd cf       	rjmp	.-6      	; 0x840 <main+0x2>

00000846 <ToggleLight>:
 846:	92 b1       	in	r25, 0x02	; 2
		break;
	}
}

void ToggleLight(){
	LIGHT_TOGGLE;	
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	89 27       	eor	r24, r25
 84c:	82 b9       	out	0x02, r24	; 2
 84e:	08 95       	ret

00000850 <ToggleGarage>:
}

void ToggleGarage(){
	static int switcher = 0;
	if(switcher == 0){
 850:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <switcher.1783>
 854:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <switcher.1783+0x1>
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	91 f4       	brne	.+36     	; 0x880 <ToggleGarage+0x30>
 85c:	84 ef       	ldi	r24, 0xF4	; 244
 85e:	91 e0       	ldi	r25, 0x01	; 1
		for (int i = 500; i < 2600; i++)
		{
			SERVO_OC = i;
 860:	e8 e9       	ldi	r30, 0x98	; 152
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	91 83       	std	Z+1, r25	; 0x01
 866:	80 83       	st	Z, r24
 868:	af e9       	ldi	r26, 0x9F	; 159
 86a:	bf e0       	ldi	r27, 0x0F	; 15
 86c:	11 97       	sbiw	r26, 0x01	; 1
 86e:	f1 f7       	brne	.-4      	; 0x86c <ToggleGarage+0x1c>
 870:	00 c0       	rjmp	.+0      	; 0x872 <ToggleGarage+0x22>
 872:	00 00       	nop
}

void ToggleGarage(){
	static int switcher = 0;
	if(switcher == 0){
		for (int i = 500; i < 2600; i++)
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	88 32       	cpi	r24, 0x28	; 40
 878:	ba e0       	ldi	r27, 0x0A	; 10
 87a:	9b 07       	cpc	r25, r27
 87c:	99 f7       	brne	.-26     	; 0x864 <ToggleGarage+0x14>
 87e:	13 c0       	rjmp	.+38     	; 0x8a6 <ToggleGarage+0x56>
		{
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	else if(switcher == 1){
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	89 f4       	brne	.+34     	; 0x8a6 <ToggleGarage+0x56>
 884:	88 e2       	ldi	r24, 0x28	; 40
 886:	9a e0       	ldi	r25, 0x0A	; 10
		for (int i = 2600; i > 500; i--)
		{
			SERVO_OC = i;
 888:	e8 e9       	ldi	r30, 0x98	; 152
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	91 83       	std	Z+1, r25	; 0x01
 88e:	80 83       	st	Z, r24
 890:	af e9       	ldi	r26, 0x9F	; 159
 892:	bf e0       	ldi	r27, 0x0F	; 15
 894:	11 97       	sbiw	r26, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <ToggleGarage+0x44>
 898:	00 c0       	rjmp	.+0      	; 0x89a <ToggleGarage+0x4a>
 89a:	00 00       	nop
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	else if(switcher == 1){
		for (int i = 2600; i > 500; i--)
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	84 3f       	cpi	r24, 0xF4	; 244
 8a0:	b1 e0       	ldi	r27, 0x01	; 1
 8a2:	9b 07       	cpc	r25, r27
 8a4:	99 f7       	brne	.-26     	; 0x88c <ToggleGarage+0x3c>
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	
	switcher++;
 8a6:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <switcher.1783>
 8aa:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <switcher.1783+0x1>
 8ae:	01 96       	adiw	r24, 0x01	; 1
	if(switcher > 1){
 8b0:	82 30       	cpi	r24, 0x02	; 2
 8b2:	91 05       	cpc	r25, r1
 8b4:	2c f4       	brge	.+10     	; 0x8c0 <ToggleGarage+0x70>
			SERVO_OC = i;
			_delay_ms(1);
		}
	}
	
	switcher++;
 8b6:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <switcher.1783+0x1>
 8ba:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <switcher.1783>
 8be:	08 95       	ret
	if(switcher > 1){
		switcher = 0;
 8c0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <switcher.1783+0x1>
 8c4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <switcher.1783>
 8c8:	08 95       	ret

000008ca <HouseController>:
		_delay_ms(200);
	}
}

void HouseController(char choice){
	switch(choice){
 8ca:	82 34       	cpi	r24, 0x42	; 66
 8cc:	31 f0       	breq	.+12     	; 0x8da <HouseController+0x10>
 8ce:	83 34       	cpi	r24, 0x43	; 67
 8d0:	31 f0       	breq	.+12     	; 0x8de <HouseController+0x14>
 8d2:	81 34       	cpi	r24, 0x41	; 65
 8d4:	29 f4       	brne	.+10     	; 0x8e0 <HouseController+0x16>
		case 'A':
		ToggleLight();
 8d6:	b7 cf       	rjmp	.-146    	; 0x846 <ToggleLight>
		break;
		case 'B':
		ToggleGarage();
 8d8:	08 95       	ret
		break;
 8da:	ba cf       	rjmp	.-140    	; 0x850 <ToggleGarage>
		case 'C':
		LockDoor();
 8dc:	08 95       	ret
 8de:	d6 cc       	rjmp	.-1620   	; 0x28c <LockDoor>
 8e0:	08 95       	ret

000008e2 <HouseMenu>:
#include "../Inits/Inits.h"
#include "House.h"

void HouseMenu(){
	while(1){
		lcd_puts(CheckLock());
 8e2:	d9 dc       	rcall	.-1614   	; 0x296 <CheckLock>
 8e4:	65 de       	rcall	.-822    	; 0x5b0 <lcd_puts>
		DisplayChoices();
 8e6:	9e df       	rcall	.-196    	; 0x824 <DisplayChoices>
		char choice = MatrixScanning();
 8e8:	77 dd       	rcall	.-1298   	; 0x3d8 <MatrixScanning>
 8ea:	ef df       	rcall	.-34     	; 0x8ca <HouseController>
		HouseController(choice);
 8ec:	2f ef       	ldi	r18, 0xFF	; 255
 8ee:	83 ec       	ldi	r24, 0xC3	; 195
 8f0:	99 e0       	ldi	r25, 0x09	; 9
 8f2:	21 50       	subi	r18, 0x01	; 1
 8f4:	80 40       	sbci	r24, 0x00	; 0
 8f6:	90 40       	sbci	r25, 0x00	; 0
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <HouseMenu+0x10>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <HouseMenu+0x1a>
 8fc:	00 00       	nop
 8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <HouseMenu>

00000900 <Toggle_Red>:
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	81 bb       	out	0x11, r24	; 17
void Toggle_Blue(){
	RGB_TOGGLE_BLUE;
}

void Toggle_Yellow(){
	RGB_TOGGLE_YELLow;
 904:	08 95       	ret

00000906 <Toggle_Blue>:
 906:	84 e0       	ldi	r24, 0x04	; 4
 908:	81 bb       	out	0x11, r24	; 17
 90a:	08 95       	ret

0000090c <Toggle_Green>:
}

void Toggle_Green(){
	RGB_TOGGLE_GREEN;
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	81 bb       	out	0x11, r24	; 17
 910:	08 95       	ret

00000912 <strcat>:
 912:	fb 01       	movw	r30, r22
 914:	dc 01       	movw	r26, r24
 916:	0d 90       	ld	r0, X+
 918:	00 20       	and	r0, r0
 91a:	e9 f7       	brne	.-6      	; 0x916 <strcat+0x4>
 91c:	11 97       	sbiw	r26, 0x01	; 1
 91e:	01 90       	ld	r0, Z+
 920:	0d 92       	st	X+, r0
 922:	00 20       	and	r0, r0
 924:	e1 f7       	brne	.-8      	; 0x91e <strcat+0xc>
 926:	08 95       	ret

00000928 <strcmp>:
 928:	fb 01       	movw	r30, r22
 92a:	dc 01       	movw	r26, r24
 92c:	8d 91       	ld	r24, X+
 92e:	01 90       	ld	r0, Z+
 930:	80 19       	sub	r24, r0
 932:	01 10       	cpse	r0, r1
 934:	d9 f3       	breq	.-10     	; 0x92c <strcmp+0x4>
 936:	99 0b       	sbc	r25, r25
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
